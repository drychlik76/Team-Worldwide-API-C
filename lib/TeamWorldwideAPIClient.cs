//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace TeamWorldwideAPIClient
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);


        /// <summary>Authenticate to start session.</summary>
        /// <param name="body">Start Session</param>
        /// <returns>Start Session</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PostCredentialsItemAsync(Credentials body)
        {
            return PostCredentialsItemAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Authenticate to start session.</summary>
        /// <param name="body">Start Session</param>
        /// <returns>Start Session</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PostCredentialsItemAsync(Credentials body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/authenticate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }



        /// <summary>Book and dispatch a shipment in the TeamBook system.</summary>
        /// <param name="body">The new BookShipment resource</param>
        /// <returns>BookShipment resource created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Jsonld> PostBookShipmentCollectionAsync(JsonldTeamBookShipmentCreate body)
        {
            return PostBookShipmentCollectionAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Book and dispatch a shipment in the TeamBook system.</summary>
        /// <param name="body">The new BookShipment resource</param>
        /// <returns>BookShipment resource created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Jsonld> PostBookShipmentCollectionAsync(JsonldTeamBookShipmentCreate body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/team-book/book-shipment");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/ld+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Jsonld>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unprocessable entity", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get TeamBook accessorials.</summary>
        /// <returns>GetAccessorials collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetGetAccessorialsCollectionAsync()
        {
            return GetGetAccessorialsCollectionAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get TeamBook accessorials.</summary>
        /// <returns>GetAccessorials collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response> GetGetAccessorialsCollectionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/team-book/get-accessorials");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get a Quote along with a reserved house bill.  Use a rateId from get-rates endpoint.</summary>
        /// <param name="rateId">Resource identifier</param>
        /// <returns>GetQuote resource</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Jsonld6> GetGetQuoteItemAsync(string rateId)
        {
            return GetGetQuoteItemAsync(rateId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a Quote along with a reserved house bill.  Use a rateId from get-rates endpoint.</summary>
        /// <param name="rateId">Resource identifier</param>
        /// <returns>GetQuote resource</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Jsonld6> GetGetQuoteItemAsync(string rateId, System.Threading.CancellationToken cancellationToken)
        {
            if (rateId == null)
                throw new System.ArgumentNullException("rateId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/team-book/get-quote/{rateId}");
            urlBuilder_.Replace("{rateId}", System.Uri.EscapeDataString(ConvertToString(rateId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Jsonld6>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get rates from the Team Book System.</summary>
        /// <param name="freight">Array of freight objects.</param>
        /// <param name="unitOfMeasure">Unit of Measure. Valid values: US (lbs/in) - METRIC (kgs/cm) - MIXED (kgs/cms)</param>
        /// <param name="teamBookAccessorials">Array of accessorial codes. Refer to accessorials returned in /api/team-book/get-accessorials</param>
        /// <param name="pickupDate">Pickup Date. Format: YYYY-MM-DD</param>
        /// <param name="insuranceAddOn">Option to add 10% to the insurance value</param>
        /// <param name="insureFreight">Used to tell the API to quote insurance. Your account must be setup for quoting insurance.</param>
        /// <param name="insuranceAmount">This parameter refers to the extra value of 'Money' type accessorials like declared value.</param>
        /// <param name="rateType">Used to specify what rates you want the API to return. Valid values are LTL, GUARANTEED, SP (Small Package), DRAY (Drayage), VOL (Volume). Default is LTL, do not change</param>
        /// <param name="linearFeet">Linear feet value. Helpful for some volume vendors to return a rate based on space needed in a truck.</param>
        /// <param name="equipment">Used for volume vendors and rates they return. Valid values: All, Van, Flatbed</param>
        /// <returns>GetRate collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response2> GetGetRateCollectionAsync(string originCity, string originState, string originZipCode, string originCountry, string destinationCity, string destinationState, string destinationZipCode, string destinationCountry, System.Collections.Generic.IEnumerable<Freight> freight, UnitOfMeasure unitOfMeasure, System.Collections.Generic.IEnumerable<string> teamBookAccessorials, string pickupDate, bool? insuranceAddOn, bool? insureFreight, double? insuranceAmount, System.Collections.Generic.IEnumerable<string> rateType, double? linearFeet, Equipment? equipment)
        {
            return GetGetRateCollectionAsync(originCity, originState, originZipCode, originCountry, destinationCity, destinationState, destinationZipCode, destinationCountry, freight, unitOfMeasure, teamBookAccessorials, pickupDate, insuranceAddOn, insureFreight, insuranceAmount, rateType, linearFeet, equipment, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get rates from the Team Book System.</summary>
        /// <param name="freight">Array of freight objects.</param>
        /// <param name="unitOfMeasure">Unit of Measure. Valid values: US (lbs/in) - METRIC (kgs/cm) - MIXED (kgs/cms)</param>
        /// <param name="teamBookAccessorials">Array of accessorial codes. Refer to accessorials returned in /api/team-book/get-accessorials</param>
        /// <param name="pickupDate">Pickup Date. Format: YYYY-MM-DD</param>
        /// <param name="insuranceAddOn">Option to add 10% to the insurance value</param>
        /// <param name="insureFreight">Used to tell the API to quote insurance. Your account must be setup for quoting insurance.</param>
        /// <param name="insuranceAmount">This parameter refers to the extra value of 'Money' type accessorials like declared value.</param>
        /// <param name="rateType">Used to specify what rates you want the API to return. Valid values are LTL, GUARANTEED, SP (Small Package), DRAY (Drayage), VOL (Volume). Default is LTL, do not change</param>
        /// <param name="linearFeet">Linear feet value. Helpful for some volume vendors to return a rate based on space needed in a truck.</param>
        /// <param name="equipment">Used for volume vendors and rates they return. Valid values: All, Van, Flatbed</param>
        /// <returns>GetRate collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response2> GetGetRateCollectionAsync(string originCity, string originState, string originZipCode, string originCountry, string destinationCity, string destinationState, string destinationZipCode, string destinationCountry, System.Collections.Generic.IEnumerable<Freight> freight, UnitOfMeasure unitOfMeasure, System.Collections.Generic.IEnumerable<string> teamBookAccessorials, string pickupDate, bool? insuranceAddOn, bool? insureFreight, double? insuranceAmount, System.Collections.Generic.IEnumerable<string> rateType, double? linearFeet, Equipment? equipment, System.Threading.CancellationToken cancellationToken)
        {
            if (originCity == null)
                throw new System.ArgumentNullException("originCity");
    
            if (originState == null)
                throw new System.ArgumentNullException("originState");
    
            if (originZipCode == null)
                throw new System.ArgumentNullException("originZipCode");
    
            if (originCountry == null)
                throw new System.ArgumentNullException("originCountry");
    
            if (destinationCity == null)
                throw new System.ArgumentNullException("destinationCity");
    
            if (destinationState == null)
                throw new System.ArgumentNullException("destinationState");
    
            if (destinationZipCode == null)
                throw new System.ArgumentNullException("destinationZipCode");
    
            if (destinationCountry == null)
                throw new System.ArgumentNullException("destinationCountry");
    
            if (freight == null)
                throw new System.ArgumentNullException("freight");
    
            if (unitOfMeasure == null)
                throw new System.ArgumentNullException("unitOfMeasure");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/team-book/get-rates?");
            urlBuilder_.Append(System.Uri.EscapeDataString("originCity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originCity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("originState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("originZipCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originZipCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("originCountry") + "=").Append(System.Uri.EscapeDataString(ConvertToString(originCountry, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("destinationCity") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationCity, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("destinationState") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationState, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("destinationZipCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationZipCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("destinationCountry") + "=").Append(System.Uri.EscapeDataString(ConvertToString(destinationCountry, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            foreach (var item_ in freight) { urlBuilder_.Append(System.Uri.EscapeDataString("freight") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Append(System.Uri.EscapeDataString("unitOfMeasure") + "=").Append(System.Uri.EscapeDataString(ConvertToString(unitOfMeasure, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (teamBookAccessorials != null) 
            {
                foreach (var item_ in teamBookAccessorials) { urlBuilder_.Append(System.Uri.EscapeDataString("teamBookAccessorials[]") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pickupDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pickupDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pickupDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (insuranceAddOn != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("insuranceAddOn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(insuranceAddOn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (insureFreight != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("insureFreight") + "=").Append(System.Uri.EscapeDataString(ConvertToString(insureFreight, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (insuranceAmount != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("insuranceAmount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(insuranceAmount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rateType != null) 
            {
                foreach (var item_ in rateType) { urlBuilder_.Append(System.Uri.EscapeDataString("rateType[]") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (linearFeet != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("linearFeet") + "=").Append(System.Uri.EscapeDataString(ConvertToString(linearFeet, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (equipment != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("equipment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(equipment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Gets collection of Team WorldWide Claims</summary>
        /// <param name="page">The collection page number</param>
        /// <returns>Claim collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response3> GetClaimCollectionAsync(int? page)
        {
            return GetClaimCollectionAsync(page, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets collection of Team WorldWide Claims</summary>
        /// <param name="page">The collection page number</param>
        /// <returns>Claim collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response3> GetClaimCollectionAsync(int? page, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/get-claim?");
            if (page != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unable to read claims.  Not allowed.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }



        /// <summary>Gets the shipment status by house bill.</summary>
        /// <returns>GetShipmentStatus collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response4> GetGetShipmentStatusCollectionAsync(string houseBill, System.Collections.Generic.IEnumerable<string> houseBills)
        {
            return GetGetShipmentStatusCollectionAsync(houseBill, houseBills, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the shipment status by house bill.</summary>
        /// <returns>GetShipmentStatus collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> GetGetShipmentStatusCollectionAsync(string houseBill, System.Collections.Generic.IEnumerable<string> houseBills, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/get-shipment-statuses?");
            if (houseBill != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("houseBill") + "=").Append(System.Uri.EscapeDataString(ConvertToString(houseBill, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (houseBills != null) 
            {
                foreach (var item_ in houseBills) { urlBuilder_.Append(System.Uri.EscapeDataString("houseBills[]") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Gets a single Team WorldWide Claim</summary>
        /// <param name="id">Resource identifier</param>
        /// <returns>Claim resource</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Read_read2> GetClaimItemAsync(string id)
        {
            return GetClaimItemAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a single Team WorldWide Claim</summary>
        /// <param name="id">Resource identifier</param>
        /// <returns>Claim resource</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Read_read2> GetClaimItemAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/get-single-claim/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Read_read2>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unable to read claim.  Not allowed.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get invoice by house bill</summary>
        /// <param name="houseBill">Resource identifier</param>
        /// <returns>GetInvoice resource</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Get_read12> GetGetInvoiceItemAsync(string houseBill)
        {
            return GetGetInvoiceItemAsync(houseBill, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get invoice by house bill</summary>
        /// <param name="houseBill">Resource identifier</param>
        /// <returns>GetInvoice resource</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Get_read12> GetGetInvoiceItemAsync(string houseBill, System.Threading.CancellationToken cancellationToken)
        {
            if (houseBill == null)
                throw new System.ArgumentNullException("houseBill");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/invoice/get/{houseBill}");
            urlBuilder_.Replace("{houseBill}", System.Uri.EscapeDataString(ConvertToString(houseBill, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Get_read12>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>File a single Team WorldWide Claim</summary>
        /// <param name="body">The new Claim resource</param>
        /// <returns>Claim resource created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Read_read2> PostClaimCollectionAsync(Write_write2 body)
        {
            return PostClaimCollectionAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>File a single Team WorldWide Claim</summary>
        /// <param name="body">The new Claim resource</param>
        /// <returns>Claim resource created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Read_read2> PostClaimCollectionAsync(Write_write2 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/post-claim");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/ld+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Read_read2>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unable to file claim. Not allowed.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unprocessable entity", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Update an existing Team WorldWide Claim</summary>
        /// <param name="id">Resource identifier</param>
        /// <param name="body">The updated Claim resource</param>
        /// <returns>Claim resource updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Read_read2> UpdateClaimItemAsync(string id, Write_write body)
        {
            return UpdateClaimItemAsync(id, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update an existing Team WorldWide Claim</summary>
        /// <param name="id">Resource identifier</param>
        /// <param name="body">The updated Claim resource</param>
        /// <returns>Claim resource updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Read_read2> UpdateClaimItemAsync(string id, Write_write body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/update-claim/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Read_read2>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unable to update claim. Not allowed.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unprocessable entity", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ShipmentClient 
    {
        private string _baseUrl = "/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ShipmentClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Add Shipment Note.</summary>
        /// <param name="houseBill">Resource identifier</param>
        /// <param name="body">The updated ShipmentNoteResource resource</param>
        /// <returns>ShipmentNoteResource resource updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Jsonld12> NoteShipmentNoteResourceItemAsync(string houseBill, JsonldShipmentCreate13 body)
        {
            return NoteShipmentNoteResourceItemAsync(houseBill, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add Shipment Note.</summary>
        /// <param name="houseBill">Resource identifier</param>
        /// <param name="body">The updated ShipmentNoteResource resource</param>
        /// <returns>ShipmentNoteResource resource updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Jsonld12> NoteShipmentNoteResourceItemAsync(string houseBill, JsonldShipmentCreate13 body, System.Threading.CancellationToken cancellationToken)
        {
            if (houseBill == null)
                throw new System.ArgumentNullException("houseBill");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/create/new/{houseBill}/note");
            urlBuilder_.Replace("{houseBill}", System.Uri.EscapeDataString(ConvertToString(houseBill, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/ld+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Jsonld12>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unprocessable entity", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Book shipments to Team Worldwide.</summary>
        /// <param name="body">The new ShipmentBookingV2 resource</param>
        /// <returns>ShipmentBookingV2 resource created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Jsonld10> BookingShipmentBookingV2CollectionAsync(JsonldShipmentBookingCreate10 body)
        {
            return BookingShipmentBookingV2CollectionAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Book shipments to Team Worldwide.</summary>
        /// <param name="body">The new ShipmentBookingV2 resource</param>
        /// <returns>ShipmentBookingV2 resource created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Jsonld10> BookingShipmentBookingV2CollectionAsync(JsonldShipmentBookingCreate10 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/create/shipmentBooking");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/ld+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Jsonld10>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unprocessable entity", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateClient 
    {
        private string _baseUrl = "/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public CreateClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Book a single shipment to Team Worldwide.</summary>
        /// <param name="body">The new ShipmentV2 resource</param>
        /// <returns>ShipmentV2 resource created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Jsonld13> ShipmentShipmentV2CollectionAsync(JsonldShipmentCreate14 body)
        {
            return ShipmentShipmentV2CollectionAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Book a single shipment to Team Worldwide.</summary>
        /// <param name="body">The new ShipmentV2 resource</param>
        /// <returns>ShipmentV2 resource created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Jsonld13> ShipmentShipmentV2CollectionAsync(JsonldShipmentCreate14 body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/create/shipment");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/ld+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Jsonld13>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unprocessable entity", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HouseClient 
    {
        private string _baseUrl = "/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public HouseClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Gets and Reserves a Team WorldWide HouseBill.</summary>
        /// <returns>GetHouseBill collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response5> BillGetHouseBillCollectionAsync()
        {
            return BillGetHouseBillCollectionAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets and Reserves a Team WorldWide HouseBill.</summary>
        /// <returns>GetHouseBill collection</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response5> BillGetHouseBillCollectionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/get-house-bill");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unable to reserve house bills.  Not allowed.", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TeamClient 
    {
        private string _baseUrl = "/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TeamClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Update Booking.</summary>
        /// <param name="teamBookingNumber">Resource identifier</param>
        /// <param name="body">The updated UpdateTeamBooking resource</param>
        /// <returns>UpdateTeamBooking resource updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Get_read28> BookingUpdateTeamBookingItemAsync(string teamBookingNumber, UpdateTeamBookingUpdateTeamBooking body)
        {
            return BookingUpdateTeamBookingItemAsync(teamBookingNumber, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Booking.</summary>
        /// <param name="teamBookingNumber">Resource identifier</param>
        /// <param name="body">The updated UpdateTeamBooking resource</param>
        /// <returns>UpdateTeamBooking resource updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Get_read28> BookingUpdateTeamBookingItemAsync(string teamBookingNumber, UpdateTeamBookingUpdateTeamBooking body, System.Threading.CancellationToken cancellationToken)
        {
            if (teamBookingNumber == null)
                throw new System.ArgumentNullException("teamBookingNumber");
    
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/teamww/update/updateShipmentBooking/{teamBookingNumber}");
            urlBuilder_.Replace("{teamBookingNumber}", System.Uri.EscapeDataString(ConvertToString(teamBookingNumber, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/merge-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/ld+json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Get_read28>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Invalid input", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unprocessable entity", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Resource not found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalReferenceShipmentBookingCreate 
    {
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalReferenceShipmentCreate 
    {
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read 
    {
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read2 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BillToShipmentBookingCreate 
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalReferenceShipmentBookingCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BillToShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalReferenceShipmentCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read3 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate2 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate2 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read4 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read2> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Book Team Book Shipment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BookShipmentTeamBookShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("quoteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuoteId { get; set; }
    
        /// <summary>Reserve a house bill from either /api/teamww/get-house-bill or get one from /api/team-book/get-quote/{rateId}</summary>
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HouseBill { get; set; }
    
        /// <summary>Leave this null. This is used in special cases.</summary>
        [Newtonsoft.Json.JsonProperty("bolPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BolPrefix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceAddon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InsuranceAddon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("thirdPartyReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThirdPartyReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("proNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamBookShipper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamBookShipperTeamBookShipmentCreate TeamBookShipper { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamBookConsignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeamBookConsigneeTeamBookShipmentCreate TeamBookConsignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("brokerInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BrokerInformationTeamBookShipmentCreate BrokerInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instructions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentNotes { get; set; }
    
        /// <summary>Emergency Contact. Required if a shipment has hazardous materials.</summary>
        [Newtonsoft.Json.JsonProperty("emergencyContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmergencyContact { get; set; }
    
        /// <summary>Emergency Phone Number. Required if a shipment has hazardous materials.</summary>
        [Newtonsoft.Json.JsonProperty("emergencyPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmergencyPhone { get; set; }
    
        /// <summary>Unit of Measure. Valid values: US (lbs/in) - METRIC (kgs/cm) - MIXED (kgs/cms)</summary>
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitOfMeasure { get; set; } = "US";
    
        [Newtonsoft.Json.JsonProperty("shipmentReference1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentReference1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentReference2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentReference2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickup", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PickupTeamBookShipmentCreate Pickup { get; set; } = new PickupTeamBookShipmentCreate();
    
        [Newtonsoft.Json.JsonProperty("delivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeliveryTeamBookShipmentCreate Delivery { get; set; }
    
        /// <summary>Array of accessorial codes. Refer to enabledAccessorials returned in /api/team-book/get-accessorials. Provide the code.</summary>
        [Newtonsoft.Json.JsonProperty("teamBookAccessorials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TeamBookAccessorials { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FreightTeamBookShipmentCreate> Freight { get; set; } = new System.Collections.ObjectModel.Collection<FreightTeamBookShipmentCreate>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Book Team Book Shipment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TeamBookResponse 
    {
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accessorials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Accessorials { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dispatched", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Dispatched { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dispatchError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DispatchError { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bOLNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BOLNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bOLPrefix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BOLPrefix { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Book Team Book Shipment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BOLNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BOLNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BOLPrefix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BOLPrefix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accessorials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Accessorials { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dispatched", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Dispatched { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dispatchError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DispatchError { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bOLNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jsonld_BOLNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bOLPrefix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jsonld_BOLPrefix { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Book Team Book Shipment</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldTeamBookShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quoteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? QuoteId { get; set; }
    
        /// <summary>Reserve a house bill from either /api/teamww/get-house-bill or get one from /api/team-book/get-quote/{rateId}</summary>
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HouseBill { get; set; }
    
        /// <summary>Leave this null. This is used in special cases.</summary>
        [Newtonsoft.Json.JsonProperty("bolPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BolPrefix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceAddon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InsuranceAddon { get; set; }
    
        [Newtonsoft.Json.JsonProperty("thirdPartyReferenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThirdPartyReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("proNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamBookShipper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldTeamBookShipmentCreate7 TeamBookShipper { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamBookConsignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldTeamBookShipmentCreate6 TeamBookConsignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("brokerInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldTeamBookShipmentCreate2 BrokerInformation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("instructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instructions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentNotes { get; set; }
    
        /// <summary>Emergency Contact. Required if a shipment has hazardous materials.</summary>
        [Newtonsoft.Json.JsonProperty("emergencyContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmergencyContact { get; set; }
    
        /// <summary>Emergency Phone Number. Required if a shipment has hazardous materials.</summary>
        [Newtonsoft.Json.JsonProperty("emergencyPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmergencyPhone { get; set; }
    
        /// <summary>Unit of Measure. Valid values: US (lbs/in) - METRIC (kgs/cm) - MIXED (kgs/cms)</summary>
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitOfMeasure { get; set; } = "US";
    
        [Newtonsoft.Json.JsonProperty("shipmentReference1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentReference1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentReference2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentReference2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickup", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JsonldTeamBookShipmentCreate5 Pickup { get; set; } = new JsonldTeamBookShipmentCreate5();
    
        [Newtonsoft.Json.JsonProperty("delivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldTeamBookShipmentCreate3 Delivery { get; set; }
    
        /// <summary>Array of accessorial codes. Refer to enabledAccessorials returned in /api/team-book/get-accessorials. Provide the code.</summary>
        [Newtonsoft.Json.JsonProperty("teamBookAccessorials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TeamBookAccessorials { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JsonldTeamBookShipmentCreate4> Freight { get; set; } = new System.Collections.ObjectModel.Collection<JsonldTeamBookShipmentCreate4>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BrokerInformationTeamBookShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customsValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomsValue { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldTeamBookShipmentCreate2 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customsValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomsValue { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get, File or Update a Claim</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Write_write 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hawb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hawb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrierAirBillNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierAirBillNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("brokerNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusOfMaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusOfMaster { get; set; }
    
        [Newtonsoft.Json.JsonProperty("finalStatusOfClaim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinalStatusOfClaim { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("piecesDamaged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PiecesDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightDamaged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WeightDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Carrier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrierNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SubAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subPaidAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SubPaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimsAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClaimsAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimPaidAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClaimPaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimCheckDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ClaimCheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateAgainst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubrogateAgainst { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SubrogateAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogatePaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SubrogatePaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubrogateCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateCheckDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubrogateCheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("declaredValueRecap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeclaredValueRecap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("declaredValueAmountOnClaim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeclaredValueAmountOnClaim { get; set; }
    
        [Newtonsoft.Json.JsonProperty("information", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Information { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateClaimCalledInByConsignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateClaimCalledInByConsignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EntryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freightPaidDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FreightPaidDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("receiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReceiveDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recapDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RecapDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("decision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Decision { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimantName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wayBillNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WayBillNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lossDamaged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LossDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("form", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Form { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Sent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ReportDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("checkDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subDatePaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubDatePaid { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get, File or Update a Claim</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Read_read 
    {
        [Newtonsoft.Json.JsonProperty("claimId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hawb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hawb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrierAirBillNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierAirBillNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("brokerNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusOfMaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusOfMaster { get; set; }
    
        [Newtonsoft.Json.JsonProperty("finalStatusOfClaim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinalStatusOfClaim { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("piecesDamaged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PiecesDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightDamaged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WeightDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Carrier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrierNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SubAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subPaidAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SubPaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimsAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClaimsAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimPaidAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClaimPaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimCheckDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ClaimCheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateAgainst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubrogateAgainst { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SubrogateAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogatePaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SubrogatePaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubrogateCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateCheckDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubrogateCheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("declaredValueRecap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeclaredValueRecap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("declaredValueAmountOnClaim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeclaredValueAmountOnClaim { get; set; }
    
        [Newtonsoft.Json.JsonProperty("information", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Information { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateClaimCalledInByConsignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateClaimCalledInByConsignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EntryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freightPaidDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FreightPaidDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("receiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReceiveDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recapDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RecapDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("decision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Decision { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimantName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wayBillNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WayBillNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lossDamaged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LossDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("form", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Form { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Sent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ReportDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("checkDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subDatePaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubDatePaid { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get, File or Update a Claim</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Read_read2 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hawb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hawb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrierAirBillNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierAirBillNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("brokerNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusOfMaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusOfMaster { get; set; }
    
        [Newtonsoft.Json.JsonProperty("finalStatusOfClaim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinalStatusOfClaim { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("piecesDamaged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PiecesDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightDamaged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WeightDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Carrier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrierNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SubAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subPaidAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SubPaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimsAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClaimsAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimPaidAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClaimPaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimCheckDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ClaimCheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateAgainst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubrogateAgainst { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SubrogateAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogatePaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SubrogatePaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubrogateCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateCheckDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubrogateCheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("declaredValueRecap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeclaredValueRecap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("declaredValueAmountOnClaim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeclaredValueAmountOnClaim { get; set; }
    
        [Newtonsoft.Json.JsonProperty("information", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Information { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateClaimCalledInByConsignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateClaimCalledInByConsignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EntryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freightPaidDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FreightPaidDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("receiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReceiveDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recapDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RecapDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("decision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Decision { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimantName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wayBillNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WayBillNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lossDamaged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LossDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("form", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Form { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Sent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ReportDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("checkDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subDatePaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubDatePaid { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get, File or Update a Claim</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Write_write2 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Write_write2_Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hawb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hawb { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrierAirBillNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierAirBillNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("brokerNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrokerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusOfMaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusOfMaster { get; set; }
    
        [Newtonsoft.Json.JsonProperty("finalStatusOfClaim", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FinalStatusOfClaim { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("piecesDamaged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PiecesDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightDamaged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WeightDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Carrier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("carrierNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CarrierNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SubAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subPaidAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SubPaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimsAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClaimsAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimPaidAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ClaimPaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimCheckDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ClaimCheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateAgainst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubrogateAgainst { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SubrogateAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogatePaidAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SubrogatePaidAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubrogateCheckNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subrogateCheckDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubrogateCheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("declaredValueRecap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeclaredValueRecap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("declaredValueAmountOnClaim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DeclaredValueAmountOnClaim { get; set; }
    
        [Newtonsoft.Json.JsonProperty("information", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Information { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dateClaimCalledInByConsignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateClaimCalledInByConsignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("entryDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EntryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freightPaidDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FreightPaidDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("receiveDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ReceiveDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("recapDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RecapDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ShipDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("decision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Decision { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product { get; set; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("claimantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimantName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceCompany", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InsuranceCompany { get; set; }
    
        [Newtonsoft.Json.JsonProperty("wayBillNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WayBillNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subCheckNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubCheckNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Write_write2_Type { get; set; }

        [Newtonsoft.Json.JsonProperty("lossDamaged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LossDamaged { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("form", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Form { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Sent { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reportDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ReportDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("checkDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CheckDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("subDatePaid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubDatePaid { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsigneeShipmentBookingCreate 
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalReferenceShipmentBookingCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConsigneeShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalReferenceShipmentCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read5 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate3 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate3 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read6 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read2> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeliveryTeamBookShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Delivery on or deliver by</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = "DB";
    
        /// <summary>From time</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldTeamBookShipmentCreate3 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Delivery on or deliver by</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentCreate3Type { get; set; } = "DB";
    
        /// <summary>From time</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Freight 
    {
        /// <summary>Unique id is assigned to each freight info. This is readable only</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeightType { get; set; } = "each";
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
        public double Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        /// <summary>
        ///         PLT (Pallet),
        ///         CTN (Carton),
        ///         CRT (Crate),
        ///         DRM (Drum),
        ///         CON (Container),
        ///         BOX (Box),
        ///         BDL (Bundle),
        ///         ENV (Envelope),
        ///         CYL (Cylinder,
        ///         TOT (Totes),
        ///         CAS (Case),
        ///         OTH (Other)
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("packageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageType { get; set; }
    
        /// <summary>Is this a hazardous shipment?</summary>
        [Newtonsoft.Json.JsonProperty("isDangerous", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDangerous { get; set; }
    
        /// <summary>
        ///         Note: Normally the class is auto-assigned by the rating system. 
        ///         Class 50 – Clean Freight - Over 50 lbs,
        ///         Class 55 - Bricks, cement, mortar, hardwood flooring, cloths or rags, magazines, copy paper,
        ///         Class 60 - Car accessories &amp; car parts, steel cables, used tires, stone blocks, glass, moldings,
        ///         Class 65 - Car parts &amp; accessories, bottled beverages, books in boxes, conveyors, chocolate in boxes, electric cords, tile,
        ///         Class 70 - Newspapers, wooden pencils, machinery, caskets, un-assembled furniture, food items, automobile engine,
        ///         Class 77.5 - Tires, bathroom fixtures, garments, shirts/pants, snowplows,
        ///         Class 85 - Crated machinery, transmissions, clutches, doors, CDs/DVDs, motorcycle engine,
        ///         Class 92.5 - Computers, monitors, refrigerators and freezers, gas-powered generators, cabinets, kiosk or ATMs,
        ///         Class 100 - Vacuum, boat &amp; car covers, canvas, wine cases, caskets,
        ///         CLass 110 - Cabinets, framed paintings &amp; artwork, table saw, metalworking,
        ///         Class 125 - Small household appliances, pictures/posters in boxes, exhibit booths, vending machines,
        ///         Class 150 - ATV, jet skis, motorcycles, assembled wooden furniture, work stations,
        ///         Class 175 - Clothing, couches, stuffed furniture, metal cabinets,
        ///         Class 200 - TVs, aircraft parts, aluminum table, packaged mattresses, snowmobiles,
        ///         Class 250 - Bamboo furniture, engine hoods, mattresses and box springs, un-assembled couch, plasma TV,
        ///         Class 300 - Wood cabinets, tables, chairs, model boats, kayaks/canoes, chassis,
        ///         Class 400 - Deer antlers,
        ///         Class 500 - Bags of gold dust, ping pong balls
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Class { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commodity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commodity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dangerous", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Dangerous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freightAsPrimusDataStructure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FreightAsPrimusDataStructure { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FreightTeamBookShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeightType { get; set; } = "each";
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
        public double Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        /// <summary>
        ///         PLT (Pallet),
        ///         CTN (Carton),
        ///         CRT (Crate),
        ///         DRM (Drum),
        ///         CON (Container),
        ///         BOX (Box),
        ///         BDL (Bundle),
        ///         ENV (Envelope),
        ///         CYL (Cylinder,
        ///         TOT (Totes),
        ///         CAS (Case),
        ///         OTH (Other)
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("packageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageType { get; set; }
    
        /// <summary>Is this a hazardous shipment?</summary>
        [Newtonsoft.Json.JsonProperty("isDangerous", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDangerous { get; set; }
    
        /// <summary>
        ///         Note: Normally the class is auto-assigned by the rating system. 
        ///         Class 50 – Clean Freight - Over 50 lbs,
        ///         Class 55 - Bricks, cement, mortar, hardwood flooring, cloths or rags, magazines, copy paper,
        ///         Class 60 - Car accessories &amp; car parts, steel cables, used tires, stone blocks, glass, moldings,
        ///         Class 65 - Car parts &amp; accessories, bottled beverages, books in boxes, conveyors, chocolate in boxes, electric cords, tile,
        ///         Class 70 - Newspapers, wooden pencils, machinery, caskets, un-assembled furniture, food items, automobile engine,
        ///         Class 77.5 - Tires, bathroom fixtures, garments, shirts/pants, snowplows,
        ///         Class 85 - Crated machinery, transmissions, clutches, doors, CDs/DVDs, motorcycle engine,
        ///         Class 92.5 - Computers, monitors, refrigerators and freezers, gas-powered generators, cabinets, kiosk or ATMs,
        ///         Class 100 - Vacuum, boat &amp; car covers, canvas, wine cases, caskets,
        ///         CLass 110 - Cabinets, framed paintings &amp; artwork, table saw, metalworking,
        ///         Class 125 - Small household appliances, pictures/posters in boxes, exhibit booths, vending machines,
        ///         Class 150 - ATV, jet skis, motorcycles, assembled wooden furniture, work stations,
        ///         Class 175 - Clothing, couches, stuffed furniture, metal cabinets,
        ///         Class 200 - TVs, aircraft parts, aluminum table, packaged mattresses, snowmobiles,
        ///         Class 250 - Bamboo furniture, engine hoods, mattresses and box springs, un-assembled couch, plasma TV,
        ///         Class 300 - Wood cabinets, tables, chairs, model boats, kayaks/canoes, chassis,
        ///         Class 400 - Deer antlers,
        ///         Class 500 - Bags of gold dust, ping pong balls
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Class { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commodity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commodity { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld2 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Unique id is assigned to each freight info. This is readable only</summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeightType { get; set; } = "each";
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
        public double Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        /// <summary>
        ///         PLT (Pallet),
        ///         CTN (Carton),
        ///         CRT (Crate),
        ///         DRM (Drum),
        ///         CON (Container),
        ///         BOX (Box),
        ///         BDL (Bundle),
        ///         ENV (Envelope),
        ///         CYL (Cylinder,
        ///         TOT (Totes),
        ///         CAS (Case),
        ///         OTH (Other)
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("packageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageType { get; set; }
    
        /// <summary>Is this a hazardous shipment?</summary>
        [Newtonsoft.Json.JsonProperty("isDangerous", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDangerous { get; set; }
    
        /// <summary>
        ///         Note: Normally the class is auto-assigned by the rating system. 
        ///         Class 50 – Clean Freight - Over 50 lbs,
        ///         Class 55 - Bricks, cement, mortar, hardwood flooring, cloths or rags, magazines, copy paper,
        ///         Class 60 - Car accessories &amp; car parts, steel cables, used tires, stone blocks, glass, moldings,
        ///         Class 65 - Car parts &amp; accessories, bottled beverages, books in boxes, conveyors, chocolate in boxes, electric cords, tile,
        ///         Class 70 - Newspapers, wooden pencils, machinery, caskets, un-assembled furniture, food items, automobile engine,
        ///         Class 77.5 - Tires, bathroom fixtures, garments, shirts/pants, snowplows,
        ///         Class 85 - Crated machinery, transmissions, clutches, doors, CDs/DVDs, motorcycle engine,
        ///         Class 92.5 - Computers, monitors, refrigerators and freezers, gas-powered generators, cabinets, kiosk or ATMs,
        ///         Class 100 - Vacuum, boat &amp; car covers, canvas, wine cases, caskets,
        ///         CLass 110 - Cabinets, framed paintings &amp; artwork, table saw, metalworking,
        ///         Class 125 - Small household appliances, pictures/posters in boxes, exhibit booths, vending machines,
        ///         Class 150 - ATV, jet skis, motorcycles, assembled wooden furniture, work stations,
        ///         Class 175 - Clothing, couches, stuffed furniture, metal cabinets,
        ///         Class 200 - TVs, aircraft parts, aluminum table, packaged mattresses, snowmobiles,
        ///         Class 250 - Bamboo furniture, engine hoods, mattresses and box springs, un-assembled couch, plasma TV,
        ///         Class 300 - Wood cabinets, tables, chairs, model boats, kayaks/canoes, chassis,
        ///         Class 400 - Deer antlers,
        ///         Class 500 - Bags of gold dust, ping pong balls
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Class { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commodity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commodity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dangerous", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Dangerous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freightAsPrimusDataStructure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FreightAsPrimusDataStructure { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldTeamBookShipmentCreate4 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Always)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weightType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeightType { get; set; } = "each";
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
        public double Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public double Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public double Height { get; set; }
    
        /// <summary>
        ///         PLT (Pallet),
        ///         CTN (Carton),
        ///         CRT (Crate),
        ///         DRM (Drum),
        ///         CON (Container),
        ///         BOX (Box),
        ///         BDL (Bundle),
        ///         ENV (Envelope),
        ///         CYL (Cylinder,
        ///         TOT (Totes),
        ///         CAS (Case),
        ///         OTH (Other)
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("packageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageType { get; set; }
    
        /// <summary>Is this a hazardous shipment?</summary>
        [Newtonsoft.Json.JsonProperty("isDangerous", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDangerous { get; set; }
    
        /// <summary>
        ///         Note: Normally the class is auto-assigned by the rating system. 
        ///         Class 50 – Clean Freight - Over 50 lbs,
        ///         Class 55 - Bricks, cement, mortar, hardwood flooring, cloths or rags, magazines, copy paper,
        ///         Class 60 - Car accessories &amp; car parts, steel cables, used tires, stone blocks, glass, moldings,
        ///         Class 65 - Car parts &amp; accessories, bottled beverages, books in boxes, conveyors, chocolate in boxes, electric cords, tile,
        ///         Class 70 - Newspapers, wooden pencils, machinery, caskets, un-assembled furniture, food items, automobile engine,
        ///         Class 77.5 - Tires, bathroom fixtures, garments, shirts/pants, snowplows,
        ///         Class 85 - Crated machinery, transmissions, clutches, doors, CDs/DVDs, motorcycle engine,
        ///         Class 92.5 - Computers, monitors, refrigerators and freezers, gas-powered generators, cabinets, kiosk or ATMs,
        ///         Class 100 - Vacuum, boat &amp; car covers, canvas, wine cases, caskets,
        ///         CLass 110 - Cabinets, framed paintings &amp; artwork, table saw, metalworking,
        ///         Class 125 - Small household appliances, pictures/posters in boxes, exhibit booths, vending machines,
        ///         Class 150 - ATV, jet skis, motorcycles, assembled wooden furniture, work stations,
        ///         Class 175 - Clothing, couches, stuffed furniture, metal cabinets,
        ///         Class 200 - TVs, aircraft parts, aluminum table, packaged mattresses, snowmobiles,
        ///         Class 250 - Bamboo furniture, engine hoods, mattresses and box springs, un-assembled couch, plasma TV,
        ///         Class 300 - Wood cabinets, tables, chairs, model boats, kayaks/canoes, chassis,
        ///         Class 400 - Deer antlers,
        ///         Class 500 - Bags of gold dust, ping pong balls
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Class { get; set; }
    
        [Newtonsoft.Json.JsonProperty("commodity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commodity { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get TeamBook enabled accessorials.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetAccessorials 
    {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get TeamBook enabled accessorials.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read7 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get TeamBook enabled accessorials.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read8 
    {
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Get_read8Id { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get TeamBook enabled accessorials.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld3 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get and Reserve House Bill</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetHouseBill 
    {
        /// <summary>Branch ID, or can use Airport code.  This is sometimes referred to as `station id`.</summary>
        [Newtonsoft.Json.JsonProperty("branchId", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string BranchId { get; set; }
    
        /// <summary>Account number for customer</summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        /// <summary>Class of house bills
        ///         AIR,
        ///         AIRT,
        ///         CAN,
        ///         OCN,
        ///         OCNT,
        ///         PRIM,
        ///         TEST,
        ///         TRAC,
        ///         TRK,
        ///         TRKT
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Class { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get and Reserve House Bill</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read9 
    {
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedDateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reserved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Reserved { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get and Reserve House Bill</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read10 
    {
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("createdDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedDateTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reserved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Reserved { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get and Reserve House Bill</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld4 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Branch ID, or can use Airport code.  This is sometimes referred to as `station id`.</summary>
        [Newtonsoft.Json.JsonProperty("branchId", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string BranchId { get; set; }
    
        /// <summary>Account number for customer</summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        /// <summary>Class of house bills
        ///         AIR,
        ///         AIRT,
        ///         CAN,
        ///         OCN,
        ///         OCNT,
        ///         PRIM,
        ///         TEST,
        ///         TRAC,
        ///         TRK,
        ///         TRKT
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("class", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Class { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Invoice API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetInvoice 
    {
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Invoice API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read11 
    {
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("controlBranch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControlBranch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ShipDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset InvoiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalInvoice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalInvoice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Get_read25 Shipper { get; set; }
    
        [Newtonsoft.Json.JsonProperty("consignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Get_read5 Consignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("billTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Get_read3 BillTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("invoiceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read17> InvoiceDetail { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Invoice API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read12 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("controlBranch", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControlBranch { get; set; }
    
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShipmentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ShipDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("invoiceDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset InvoiceDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("totalInvoice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalInvoice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Get_read26 Shipper { get; set; }
    
        [Newtonsoft.Json.JsonProperty("consignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Get_read6 Consignee { get; set; }
    
        [Newtonsoft.Json.JsonProperty("billTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Get_read4 BillTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("invoiceDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read18> InvoiceDetail { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Invoice API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld5 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get Quote</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetQuote 
    {
        [Newtonsoft.Json.JsonProperty("rateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get Quote</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QuoteResponse 
    {
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quoteId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int QuoteId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quoteNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get Quote</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld6 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quoteId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int QuoteId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quoteNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get Quote</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld7 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get Rates</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetRate 
    {
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originCity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OriginCity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string OriginState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originZipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string OriginZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string OriginCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationCity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationCity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string DestinationState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationZipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string DestinationZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string DestinationCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Freight> Freight { get; set; } = new System.Collections.ObjectModel.Collection<Freight>();
    
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnitOfMeasure { get; set; } = "US";
    
        /// <summary>Array of accessorial codes. Refer to enabledAccessorials returned in /api/team-book/get-accessorials. Provide the code.</summary>
        [Newtonsoft.Json.JsonProperty("teamBookAccessorials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TeamBookAccessorials { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PickupDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateTypeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RateTypeList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Equipment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceAddOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InsuranceAddOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insureFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InsureFreight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InsuranceAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("linearFeet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LinearFeet { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get Rates</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read13 
    {
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quoteDisclaimer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteDisclaimer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Vendors { get; set; }
    
        /// <summary>Rates from provider</summary>
        [Newtonsoft.Json.JsonProperty("rateDataCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read21> RateDataCollection { get; set; }
    
        /// <summary>No rates available from provider</summary>
        [Newtonsoft.Json.JsonProperty("rateNoDataCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read23> RateNoDataCollection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accessorials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Accessorials { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get Rates</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read14 
    {
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("quoteDisclaimer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QuoteDisclaimer { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Vendors { get; set; }
    
        /// <summary>Rates from provider</summary>
        [Newtonsoft.Json.JsonProperty("rateDataCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read22> RateDataCollection { get; set; }
    
        /// <summary>No rates available from provider</summary>
        [Newtonsoft.Json.JsonProperty("rateNoDataCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read24> RateNoDataCollection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accessorials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Accessorials { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Get Rates</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld8 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originCity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OriginCity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string OriginState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originZipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string OriginZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string OriginCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationCity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationCity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string DestinationState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationZipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string DestinationZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string DestinationCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("freight", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Jsonld2> Freight { get; set; } = new System.Collections.ObjectModel.Collection<Jsonld2>();
    
        [Newtonsoft.Json.JsonProperty("unitOfMeasure", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnitOfMeasure { get; set; } = "US";
    
        /// <summary>Array of accessorial codes. Refer to enabledAccessorials returned in /api/team-book/get-accessorials. Provide the code.</summary>
        [Newtonsoft.Json.JsonProperty("teamBookAccessorials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TeamBookAccessorials { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PickupDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateTypeList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RateTypeList { get; set; }
    
        [Newtonsoft.Json.JsonProperty("equipment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Equipment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceAddOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InsuranceAddOn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insureFreight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InsureFreight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("insuranceAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InsuranceAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("linearFeet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LinearFeet { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Status API </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetShipmentStatus 
    {
        /// <summary>Search by house bill or list of house bills.</summary>
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HouseBill { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Status API </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read15 
    {
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("controlAirport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControlAirport { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gmtOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GmtOffset { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Status API </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read16 
    {
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusMessage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("statusTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("controlAirport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControlAirport { get; set; }
    
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination { get; set; }
    
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gmtOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int GmtOffset { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Status API </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld9 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Search by house bill or list of house bills.</summary>
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HouseBill { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read17 
    {
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("charge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Charge { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read18 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("charge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Charge { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PickupTeamBookShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Pickup on or pickup by</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = "PB";
    
        /// <summary>From time</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldTeamBookShipmentCreate5 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Pickup on or pickup by</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JsonldTeamBookShipmentCreate5_Type { get; set; } = "PB";
    
        /// <summary>From time</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProjectedCustomerChargeShipmentBookingCreate 
    {
        /// <summary>
        ///         [2H] TWO MAN SVCS - 1 HR MINIMUM
        ///         [2M] TWO MAN SVC - PER 1/4 HOUR
        ///         [2MD] TWO MAN DELIVERY
        ///         [2MP] TWO MAN PICKUP
        ///         [2T] TWO MAN SVCS - 2 HR MIN
        ///         [3M] THREE MAN SERVICE
        ///         [4M] FOUR MAN SERVICE
        ///         [ACC] ALAMEDA CORRIDOR CHARGE
        ///         [ACD] ADVANCED CHARGES DESTINATION
        ///         [ACO] ADVANCED CHARGES ORIGIN
        ///         [ADC] ADDRESS CORRECTION
        ///         [ADF] ADVANCED DUTY FEE
        ///         [ADL] ATTEMPTED DELIVERY
        ///         [ADM] ADMINISTRATION FEE
        ///         [ADR] AIRPORT DROP OR RECOVERY
        ///         [ADU] ANTI-DUMPING FEE
        ///         [ADV] ADVANCE CHECK FEE
        ///         [AES] AES FEE
        ///         [AGI] AGRICULTURAL HOLD
        ///         [AHD] AFTER HOURS DELIVERY
        ///         [AHP] AFTER HOURS PICKUP
        ///         [ALC] ALL CARGO
        ///         [ALH] AIRLINE HANDLING
        ///         [AMC] ADDITIONAL MACHINE
        ///         [AMS] AMS FEE
        ///         [APD] APPOINTMENT DELIVERY
        ///         [APP] APPOINTMENT PICKUP
        ///         [APQ] ANIMAL PLANT QUARANTINE
        ///         [APS] AGENT PROFIT SPLIT
        ///         [AQI] AGRICULTURAL CHARGE
        ///         [ATP] ATTEMPTED PICKUP
        ///         [ATX] AIRLINE TAX
        ///         [AWB] AIR WAYBILL FEE
        ///         [BAF] BUNKER ADJUSTMENT FACTOR
        ///         [BBK] BROKERAGE ON BREAKBULK
        ///         [BFI] BAF INCREASE
        ///         [BLP] BILL OF LADING PREPARATION
        ///         [BND] BOND CHARGES
        ///         [BOL] BILL OF LADING FEE
        ///         [BPF] BOND PREPARATION FEE
        ///         [BRK] BROKERAGE
        ///         [BSD] BEYOND SPECIAL DELIVERY
        ///         [BSP] BEYOND SPECIAL PICKUP
        ///         [BYD] BEYOND DELIVERY
        ///         [BYP] BEYOND PICKUP
        ///         [C&amp;A] CVD/ADD DUTY
        ///         [CBF] CUSTOMS BOND FEE
        ///         [CBP] CONTINUOUS ENTRY BOND
        ///         [CDF] C.O.D. FEE
        ///         [CEX] CUSTOMS EXAM FEE
        ///         [CFO] COLLECT OCEAN FRT
        ///         [CFS] CFS CHARGES
        ///         [CGS] CARGO SCREENING
        ///         [CHS] CHASSIS CHARGE
        ///         [CHZ] CHECK FOR HAZ MAT
        ///         [CLD] CONTAINER LOADING
        ///         [CLE] CLEARANCE AND HANDLING
        ///         [CLR] CUSTOMS CLEARANCE &amp; HANDLING
        ///         [CM] CONVENTION MATERIAL
        ///         [CMD] CONVENTION CENTER DELIVERY
        ///         [CMP] CONVENTION CENTER PICKUP
        ///         [CO] CERTIFICATE OF ORIGIN
        ///         [COC] COORDINATION AND CONTROL
        ///         [COD] C.O.D. MONEY
        ///         [COF] CERTIFICATE OF ORIGIN FEE
        ///         [COL] COLLECTION FEE
        ///         [CON] CONSULTING SERVICES
        ///         [COR] COURIER
        ///         [CPF] CONSOL / PORT SERVICE FEE
        ///         [CPY] COPY OF DOCUMENT OR POD
        ///         [CR] CREDIT
        ///         [CRE] CRANE CHARGES
        ///         [CRN] PRESENTATION OF CARNET
        ///         [CRS] CROSS DOCK FEES
        ///         [CRT] CRATING &amp; PACKAGING
        ///         [CSD] CONTACT SHIPPER FOR DETAILS
        ///         [CST] CUSTOMS TITLE SEARCH
        ///         [CTF] CLEAN TRUCK FEE
        ///         [CTG] CARTAGE
        ///         [CVC] CONVENTION CENTER FEE
        ///         [CXB] CONTAINER BUILDUP
        ///         [DAD] DAD/DOC/WHSE
        ///         [DAP] DELIVERED AT PLACE
        ///         [DCR] DOMINICAN CONTAINER RELEASE
        ///         [DDP] DELIVERY DUTY PAID
        ///         [DEM] DEMURRAGE
        ///         [DET] DETENTION
        ///         [DGC] DANGEROUS GOODS CERTIFICATE
        ///         [DGR] DANGEROUS GOODS
        ///         [DIM] HEAVY / DIM WEIGHT
        ///         [DIV] DIVERSION FEE
        ///         [DK] DOCKS &amp; PIERS
        ///         [DKD] DOCKS/PIERS DELIVERY
        ///         [DKP] DOCKS/PIERS PICKUP
        ///         [DLR] DELIVERY
        ///         [DO] DELIVERY ORDER
        ///         [DOC] DOCUMENTATION
        ///         [DPF] DROP FEE
        ///         [DRH] DR HANDLING
        ///         [DRY] DRAYAGE
        ///         [DSB] DISBURSEMENT FEE
        ///         [DST] DESTINATION CHARGES
        ///         [DTO] DOCUMENT TURNOVER
        ///         [DTQ] DUTY - SUBJECT TO LIQUIDATION
        ///         [DTY] DUTY AND TAXES
        ///         [DVF] DECLARED VALUE FEE
        ///         [EDF] EXPORT DECLARATION FEE
        ///         [EDH] EXPORT DECLARATION HANDLING
        ///         [EFH] ENTRY FEE &amp; HANDLING
        ///         [EHD] EXPORT HANDLING
        ///         [EOV] EXTRAORDINARY VALUE ITEMS
        ///         [ERO] ERRORS &amp; OMISSIONS POLICY
        ///         [EUC] EU CUSTOMS FEE
        ///         [EUD] EXCLUSIVE USE VEHICLE DELIVERY
        ///         [EUP] EXCLUSIVE USE VEHICLE PICKUP
        ///         [EUV] EXCLUSIVE USE VEHICLE
        ///         [EVD] EOV, HANDLE WITH CARE (D)
        ///         [EVP] EOV, HANDLE WITH CARE (P)
        ///         [EXM] EXAMINATION COORDINATION
        ///         [FCC] FEE FOR COLLECT CHARGES
        ///         [FCL] FREIGHT CHARGE COLLECT FEE
        ///         [FDA] FOOD &amp; DRUG ENTRY
        ///         [FIN] FINANCE CHARGES
        ///         [FKL] FORKLIFT FEE
        ///         [FRD] FREIGHT DISCOUNT
        ///         [FRT] FREIGHT CHARGE
        ///         [FSC] FUEL SURCHARGE
        ///         [FSD] FUEL SURCHARGE GROUND
        ///         [FSJ] FUEL SURCHARGE AIR
        ///         [FWD] FORWARDING CHARGES
        ///         [GRI] GENERAL RATE INCREASE
        ///         [GST] GOODS AND SERVICES TAX
        ///         [H&amp;M] HOTELS &amp; MALLS
        ///         [HAF] HOUSE AIRFREIGHT
        ///         [HAP] HOLD AT AIRPORT
        ///         [HAZ] HAZARDOUS MATERIALS
        ///         [HD1] HANDLING CHARGES (HD1)
        ///         [HKD] HONG KONG DELIVERY ORDER
        ///         [HKE] HK EXPORT DECLARATION AND FEES
        ///         [HKG] HONG KONG GATE CHARGES
        ///         [HLS] HEAVY LIFT SURCHARGE
        ///         [HMA] ACCESSIBLE HAZ MAT
        ///         [HMF] HARBOR MAINTENANCE FEES
        ///         [HMI] INACCESSIBLE HAZ MAT
        ///         [HND] HANDLING CHARGES
        ///         [HOF] OCEAN FREIGHT
        ///         [HPU] HOLD FOR PICKUP
        ///         [HST] HARMONIZED SALES TAX
        ///         [IEF] IE FEE &amp; HANDLING
        ///         [IHD] IMPORT HANDLING
        ///         [IND] INSIDE DELIVERY
        ///         [INH] INSIDE CHARGE - 1 HR MIN
        ///         [INL] INLAND FRT
        ///         [INP] INSIDE PICKUP
        ///         [INS] INSURANCE AND SERVICES
        ///         [INT] INTEREST
        ///         [IOF] OCEAN FREIGHT B/B
        ///         [IPI] IPI FEE
        ///         [IPR] IPPC PALLET REPLACEMENT
        ///         [ISC] AIRLINE SERVICE FEE
        ///         [ISF] ISF FILING FEE &amp; HANDLING
        ///         [ISP] INSPECTION SERVICES
        ///         [ITF] I.T. FEE &amp; HANDLING
        ///         [ITV] I.T. VALIDATION FEE
        ///         [L/S] LUMP SUM
        ///         [LAD] LIMITED ACCESS DELIVERY
        ///         [LAP] LIMITED ACCESS PICKUP
        ///         [LDL] LOCAL DELIVERY
        ///         [LEG] LEGALIZATION
        ///         [LF] LOCATION FEE
        ///         [LG] LIFTGATE
        ///         [LGD] LIFTGATE DELIVERY
        ///         [LGP] LIFTGATE PICKUP
        ///         [LH] LINE HAUL
        ///         [LOC] LETTER OF CREDIT
        ///         [MBD] MILITARY BASE DELIVERY
        ///         [MBP] MILITARY BASE PICKUP
        ///         [MFD] MASONITE FLOOR DELIVERY
        ///         [MFP] MASONITE FLOOR PICKUP
        ///         [MHF] MERCHANDISE PROC/HARBOR MAINT
        ///         [MIS] MISCELLANEOUS
        ///         [MS2] COURIER (MS2)
        ///         [MSE] MERCHANDISE PROCESSING FEE
        ///         [MSG] MESSENGER FEE
        ///         [MYF] MARSHALLING YARD FEE
        ///         [NAB] NEXT DAY AM BEYOND
        ///         [NAV] NAVCAN
        ///         [NCD] NOTIFY CTRL IF PROBLEMS DEL
        ///         [NCF] NAV CAN FEE
        ///         [NCP] NOTIFY CTRL IF PROBLEMS PICKUP
        ///         [NFB] NFO BEYOND
        ///         [NRF] NON-RESIDENTIAL FEE
        ///         [NSF] NON-SUFFICIENT FUNDS FEES
        ///         [OHR] ON HAND REFUSED SHIPMENT CHG
        ///         [ONC] ON-CARRIAGE
        ///         [OND] O/N DEL BEFORE NOON
        ///         [OPH] OCEAN PORT HANDLING
        ///         [OPS] OCEAN P/S
        ///         [ORG] ORIGIN FEE
        ///         [ORI] ORION FEE
        ///         [OSD] OVERSIZE DELIVERY
        ///         [OSP] OVERSIZE PICKUP
        ///         [OSZ] OVERSIZE SURCHARGE
        ///         [OT] OVERTIME/WEEKEND
        ///         [OTC] OVER THE COUNTER
        ///         [OTH] OTHER CHARGE
        ///         [OTL] OUTLAY FOR ADDITIONAL CHARGES
        ///         [OZ1] OVERSIZE TIER 1
        ///         [OZ2] OVERSIZE TIER 2
        ///         [OZ3] OVERSIZE TIER 3
        ///         [P/S] PROFIT SPLIT
        ///         [PCS] PANAMA CANAL SURCHARGE
        ///         [PDE] PROOF OF DELIVERY (ELECTRONIC)
        ///         [PE] PERSONAL EFFECTS
        ///         [PEN] POST ENTRY SERVICES
        ///         [PFA] AIRFREIGHT LESS IATA
        ///         [PJ] PALLET JACK CHARGE
        ///         [PPF] PIER PASS FEE
        ///         [PRC] PRE-CARRIAGE
        ///         [PRF] PROTECTIVE FLOORING
        ///         [PSF] PORT SECURITY FEE
        ///         [PSS] PEAK SEASON SURCHARGE
        ///         [PST] PROVINCIAL SALES TAX
        ///         [PUP] PICKUP
        ///         [QST] QUEBEC SALES TAX
        ///         [RBC] RE-BILL CHARGE
        ///         [RCC] RECONSIGN / DIVERSION
        ///         [RCF] RECOVERY FEE
        ///         [RCL] REDELIVERY
        ///         [RCM] RECONSIGNMENT
        ///         [REB] CUSTOMER REBATE / INCENTIVE
        ///         [RLD] RESIDENTIAL DELIVERY
        ///         [RLP] RESIDENTIAL PICKUP
        ///         [RPK] REPACK
        ///         [RWD] REWEIGH AND DIMENSION
        ///         [SC] STAIR CARRY
        ///         [SCW] STAIR CARRY WEIGHT RATED
        ///         [SDA] SPECIAL DELIVERY AFTER HOURS
        ///         [SDW] SPECIAL DELIVERY WEEKEND
        ///         [SDY] SPECIAL DELIVERY HOLIDAY
        ///         [SEB] SINGLE ENTRY BOND
        ///         [SEC] SECURITY SURCHARGE
        ///         [SED] SHIPPERS EXPORT DECLARATION
        ///         [SEM] SEMINAR FEES
        ///         [SIG] SIGNATURE SERVICE
        ///         [SIL] STEEL IMPORT LICENSE
        ///         [SMR] SEMINAR
        ///         [SP] SHORT PAY AUTHORIZED
        ///         [SPA] SPECIAL PICKUP AFTER HOURS
        ///         [SPD] SPECIAL DELIVERY
        ///         [SPH] SPECIAL HANDLING SERVICES
        ///         [SPP] SPECIAL PICKUP
        ///         [SPW] SPECIAL PICKUP WEEKEND
        ///         [SPY] SPECIAL PICKUP HOLIDAY
        ///         [SRG] SEGREGATION
        ///         [SSB] STEAMSHIP LINE BILL OF LADING
        ///         [SSP] SERVICE CENTER PERCENTAGE
        ///         [STB] SINGLE TRANSACTION BOND
        ///         [STD] STORAGE DESTINATION
        ///         [STF] CONTAINER STUFFING
        ///         [STG] STORAGE
        ///         [STO] STORAGE ORIGIN
        ///         [STP] STOP OFF
        ///         [SVU] SERVICE UPGRADE
        ///         [SZD] SPECIAL DELIVERY - ZONE CHARGE
        ///         [SZP] SPECIAL PICKUP - ZONE CHARGE
        ///         [T&amp;F] OTHER DUTY TAXES &amp; FEES
        ///         [TAR] TARIFF FILING FEES
        ///         [THC] TERMINAL HANDLING
        ///         [TKP] PU AT TRK TRMNL OFF AIRPORT
        ///         [TRL] TRANSLOAD
        ///         [TRR] TRASH REMOVAL
        ///         [TSD] APT TIER SURCHARGE - DEL
        ///         [TSH] TRADE SHOW HANDLING
        ///         [TSP] APT TIER SURCHARGE - PU
        ///         [TST] TESTING CHARGE
        ///         [TTC] TEAM TECH COMMERCIAL
        ///         [TTD] TEAM TECH DELIVERY
        ///         [TTR] TEAM TECH RESIDENTIAL
        ///         [TYD] TEAM TECH BEYOND DELIVERY
        ///         [UNL] UNLOADING
        ///         [UPK] UNPACK
        ///         [VAC] VACIS EXAMINATION
        ///         [VAT] VAT
        ///         [VGM] VERIFIED GROSS WEIGHT
        ///         [VLD] VERIFY LIFTGATE REQUIRED DEL
        ///         [VLP] VERIFY LIFTGATE REQUIRED PU
        ///         [VPK] VERIFY PROPERLY PACKED
        ///         [WED] WEEKEND DELIVERY
        ///         [WEP] WEEKEND PICKUP
        ///         [WFG] WHARFAGE
        ///         [WGD] WHITE GLOVE DELIVERY
        ///         [WHI] WAREHOUSE IN
        ///         [WHO] WAREHOUSE OUT
        ///         [WHS] WAREHOUSING
        ///         [WHX] WAREHOUSE TRANSFER
        ///         [WIO] WAREHOUSING, IN &amp; OUT
        ///         [WT] WAIT TIME
        ///         [WTC] WAIT TIME FOR CONTAINERS
        ///         [WTD] WAIT TIME AT DESTINATION
        ///         [WTP] WAIT TIME AT ORIGIN
        ///         [WWD] WAREHOUSE WITHDRAWALS
        ///         [XAD] EXTENDED AFTER HOURS DELIVERY
        ///         [XAP] EXTENDED AFTER HOURS PICKUP
        ///         [XDP] EXTD DIST TRUCK TERM DROP
        ///         [XDR] EXTRA DRAYAGE
        ///         [XEX] X-RAY EXAM FEE
        ///         [XFR] TRANSFER
        ///         [XRC] EXTD DIST TRUCK TERM RECOVERY
        ///         [XRT] EXTRA ROUND TRIP
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; } = "[FRT] FREIGHT CHARGE";
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = "USD";
    
        /// <summary>Comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Comment { get; set; }
    
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProjectedCustomerChargeShipmentCreate 
    {
        /// <summary>
        ///         [2H] TWO MAN SVCS - 1 HR MINIMUM
        ///         [2M] TWO MAN SVC - PER 1/4 HOUR
        ///         [2MD] TWO MAN DELIVERY
        ///         [2MP] TWO MAN PICKUP
        ///         [2T] TWO MAN SVCS - 2 HR MIN
        ///         [3M] THREE MAN SERVICE
        ///         [4M] FOUR MAN SERVICE
        ///         [ACC] ALAMEDA CORRIDOR CHARGE
        ///         [ACD] ADVANCED CHARGES DESTINATION
        ///         [ACO] ADVANCED CHARGES ORIGIN
        ///         [ADC] ADDRESS CORRECTION
        ///         [ADF] ADVANCED DUTY FEE
        ///         [ADL] ATTEMPTED DELIVERY
        ///         [ADM] ADMINISTRATION FEE
        ///         [ADR] AIRPORT DROP OR RECOVERY
        ///         [ADU] ANTI-DUMPING FEE
        ///         [ADV] ADVANCE CHECK FEE
        ///         [AES] AES FEE
        ///         [AGI] AGRICULTURAL HOLD
        ///         [AHD] AFTER HOURS DELIVERY
        ///         [AHP] AFTER HOURS PICKUP
        ///         [ALC] ALL CARGO
        ///         [ALH] AIRLINE HANDLING
        ///         [AMC] ADDITIONAL MACHINE
        ///         [AMS] AMS FEE
        ///         [APD] APPOINTMENT DELIVERY
        ///         [APP] APPOINTMENT PICKUP
        ///         [APQ] ANIMAL PLANT QUARANTINE
        ///         [APS] AGENT PROFIT SPLIT
        ///         [AQI] AGRICULTURAL CHARGE
        ///         [ATP] ATTEMPTED PICKUP
        ///         [ATX] AIRLINE TAX
        ///         [AWB] AIR WAYBILL FEE
        ///         [BAF] BUNKER ADJUSTMENT FACTOR
        ///         [BBK] BROKERAGE ON BREAKBULK
        ///         [BFI] BAF INCREASE
        ///         [BLP] BILL OF LADING PREPARATION
        ///         [BND] BOND CHARGES
        ///         [BOL] BILL OF LADING FEE
        ///         [BPF] BOND PREPARATION FEE
        ///         [BRK] BROKERAGE
        ///         [BSD] BEYOND SPECIAL DELIVERY
        ///         [BSP] BEYOND SPECIAL PICKUP
        ///         [BYD] BEYOND DELIVERY
        ///         [BYP] BEYOND PICKUP
        ///         [C&amp;A] CVD/ADD DUTY
        ///         [CBF] CUSTOMS BOND FEE
        ///         [CBP] CONTINUOUS ENTRY BOND
        ///         [CDF] C.O.D. FEE
        ///         [CEX] CUSTOMS EXAM FEE
        ///         [CFO] COLLECT OCEAN FRT
        ///         [CFS] CFS CHARGES
        ///         [CGS] CARGO SCREENING
        ///         [CHS] CHASSIS CHARGE
        ///         [CHZ] CHECK FOR HAZ MAT
        ///         [CLD] CONTAINER LOADING
        ///         [CLE] CLEARANCE AND HANDLING
        ///         [CLR] CUSTOMS CLEARANCE &amp; HANDLING
        ///         [CM] CONVENTION MATERIAL
        ///         [CMD] CONVENTION CENTER DELIVERY
        ///         [CMP] CONVENTION CENTER PICKUP
        ///         [CO] CERTIFICATE OF ORIGIN
        ///         [COC] COORDINATION AND CONTROL
        ///         [COD] C.O.D. MONEY
        ///         [COF] CERTIFICATE OF ORIGIN FEE
        ///         [COL] COLLECTION FEE
        ///         [CON] CONSULTING SERVICES
        ///         [COR] COURIER
        ///         [CPF] CONSOL / PORT SERVICE FEE
        ///         [CPY] COPY OF DOCUMENT OR POD
        ///         [CR] CREDIT
        ///         [CRE] CRANE CHARGES
        ///         [CRN] PRESENTATION OF CARNET
        ///         [CRS] CROSS DOCK FEES
        ///         [CRT] CRATING &amp; PACKAGING
        ///         [CSD] CONTACT SHIPPER FOR DETAILS
        ///         [CST] CUSTOMS TITLE SEARCH
        ///         [CTF] CLEAN TRUCK FEE
        ///         [CTG] CARTAGE
        ///         [CVC] CONVENTION CENTER FEE
        ///         [CXB] CONTAINER BUILDUP
        ///         [DAD] DAD/DOC/WHSE
        ///         [DAP] DELIVERED AT PLACE
        ///         [DCR] DOMINICAN CONTAINER RELEASE
        ///         [DDP] DELIVERY DUTY PAID
        ///         [DEM] DEMURRAGE
        ///         [DET] DETENTION
        ///         [DGC] DANGEROUS GOODS CERTIFICATE
        ///         [DGR] DANGEROUS GOODS
        ///         [DIM] HEAVY / DIM WEIGHT
        ///         [DIV] DIVERSION FEE
        ///         [DK] DOCKS &amp; PIERS
        ///         [DKD] DOCKS/PIERS DELIVERY
        ///         [DKP] DOCKS/PIERS PICKUP
        ///         [DLR] DELIVERY
        ///         [DO] DELIVERY ORDER
        ///         [DOC] DOCUMENTATION
        ///         [DPF] DROP FEE
        ///         [DRH] DR HANDLING
        ///         [DRY] DRAYAGE
        ///         [DSB] DISBURSEMENT FEE
        ///         [DST] DESTINATION CHARGES
        ///         [DTO] DOCUMENT TURNOVER
        ///         [DTQ] DUTY - SUBJECT TO LIQUIDATION
        ///         [DTY] DUTY AND TAXES
        ///         [DVF] DECLARED VALUE FEE
        ///         [EDF] EXPORT DECLARATION FEE
        ///         [EDH] EXPORT DECLARATION HANDLING
        ///         [EFH] ENTRY FEE &amp; HANDLING
        ///         [EHD] EXPORT HANDLING
        ///         [EOV] EXTRAORDINARY VALUE ITEMS
        ///         [ERO] ERRORS &amp; OMISSIONS POLICY
        ///         [EUC] EU CUSTOMS FEE
        ///         [EUD] EXCLUSIVE USE VEHICLE DELIVERY
        ///         [EUP] EXCLUSIVE USE VEHICLE PICKUP
        ///         [EUV] EXCLUSIVE USE VEHICLE
        ///         [EVD] EOV, HANDLE WITH CARE (D)
        ///         [EVP] EOV, HANDLE WITH CARE (P)
        ///         [EXM] EXAMINATION COORDINATION
        ///         [FCC] FEE FOR COLLECT CHARGES
        ///         [FCL] FREIGHT CHARGE COLLECT FEE
        ///         [FDA] FOOD &amp; DRUG ENTRY
        ///         [FIN] FINANCE CHARGES
        ///         [FKL] FORKLIFT FEE
        ///         [FRD] FREIGHT DISCOUNT
        ///         [FRT] FREIGHT CHARGE
        ///         [FSC] FUEL SURCHARGE
        ///         [FSD] FUEL SURCHARGE GROUND
        ///         [FSJ] FUEL SURCHARGE AIR
        ///         [FWD] FORWARDING CHARGES
        ///         [GRI] GENERAL RATE INCREASE
        ///         [GST] GOODS AND SERVICES TAX
        ///         [H&amp;M] HOTELS &amp; MALLS
        ///         [HAF] HOUSE AIRFREIGHT
        ///         [HAP] HOLD AT AIRPORT
        ///         [HAZ] HAZARDOUS MATERIALS
        ///         [HD1] HANDLING CHARGES (HD1)
        ///         [HKD] HONG KONG DELIVERY ORDER
        ///         [HKE] HK EXPORT DECLARATION AND FEES
        ///         [HKG] HONG KONG GATE CHARGES
        ///         [HLS] HEAVY LIFT SURCHARGE
        ///         [HMA] ACCESSIBLE HAZ MAT
        ///         [HMF] HARBOR MAINTENANCE FEES
        ///         [HMI] INACCESSIBLE HAZ MAT
        ///         [HND] HANDLING CHARGES
        ///         [HOF] OCEAN FREIGHT
        ///         [HPU] HOLD FOR PICKUP
        ///         [HST] HARMONIZED SALES TAX
        ///         [IEF] IE FEE &amp; HANDLING
        ///         [IHD] IMPORT HANDLING
        ///         [IND] INSIDE DELIVERY
        ///         [INH] INSIDE CHARGE - 1 HR MIN
        ///         [INL] INLAND FRT
        ///         [INP] INSIDE PICKUP
        ///         [INS] INSURANCE AND SERVICES
        ///         [INT] INTEREST
        ///         [IOF] OCEAN FREIGHT B/B
        ///         [IPI] IPI FEE
        ///         [IPR] IPPC PALLET REPLACEMENT
        ///         [ISC] AIRLINE SERVICE FEE
        ///         [ISF] ISF FILING FEE &amp; HANDLING
        ///         [ISP] INSPECTION SERVICES
        ///         [ITF] I.T. FEE &amp; HANDLING
        ///         [ITV] I.T. VALIDATION FEE
        ///         [L/S] LUMP SUM
        ///         [LAD] LIMITED ACCESS DELIVERY
        ///         [LAP] LIMITED ACCESS PICKUP
        ///         [LDL] LOCAL DELIVERY
        ///         [LEG] LEGALIZATION
        ///         [LF] LOCATION FEE
        ///         [LG] LIFTGATE
        ///         [LGD] LIFTGATE DELIVERY
        ///         [LGP] LIFTGATE PICKUP
        ///         [LH] LINE HAUL
        ///         [LOC] LETTER OF CREDIT
        ///         [MBD] MILITARY BASE DELIVERY
        ///         [MBP] MILITARY BASE PICKUP
        ///         [MFD] MASONITE FLOOR DELIVERY
        ///         [MFP] MASONITE FLOOR PICKUP
        ///         [MHF] MERCHANDISE PROC/HARBOR MAINT
        ///         [MIS] MISCELLANEOUS
        ///         [MS2] COURIER (MS2)
        ///         [MSE] MERCHANDISE PROCESSING FEE
        ///         [MSG] MESSENGER FEE
        ///         [MYF] MARSHALLING YARD FEE
        ///         [NAB] NEXT DAY AM BEYOND
        ///         [NAV] NAVCAN
        ///         [NCD] NOTIFY CTRL IF PROBLEMS DEL
        ///         [NCF] NAV CAN FEE
        ///         [NCP] NOTIFY CTRL IF PROBLEMS PICKUP
        ///         [NFB] NFO BEYOND
        ///         [NRF] NON-RESIDENTIAL FEE
        ///         [NSF] NON-SUFFICIENT FUNDS FEES
        ///         [OHR] ON HAND REFUSED SHIPMENT CHG
        ///         [ONC] ON-CARRIAGE
        ///         [OND] O/N DEL BEFORE NOON
        ///         [OPH] OCEAN PORT HANDLING
        ///         [OPS] OCEAN P/S
        ///         [ORG] ORIGIN FEE
        ///         [ORI] ORION FEE
        ///         [OSD] OVERSIZE DELIVERY
        ///         [OSP] OVERSIZE PICKUP
        ///         [OSZ] OVERSIZE SURCHARGE
        ///         [OT] OVERTIME/WEEKEND
        ///         [OTC] OVER THE COUNTER
        ///         [OTH] OTHER CHARGE
        ///         [OTL] OUTLAY FOR ADDITIONAL CHARGES
        ///         [OZ1] OVERSIZE TIER 1
        ///         [OZ2] OVERSIZE TIER 2
        ///         [OZ3] OVERSIZE TIER 3
        ///         [P/S] PROFIT SPLIT
        ///         [PCS] PANAMA CANAL SURCHARGE
        ///         [PDE] PROOF OF DELIVERY (ELECTRONIC)
        ///         [PE] PERSONAL EFFECTS
        ///         [PEN] POST ENTRY SERVICES
        ///         [PFA] AIRFREIGHT LESS IATA
        ///         [PJ] PALLET JACK CHARGE
        ///         [PPF] PIER PASS FEE
        ///         [PRC] PRE-CARRIAGE
        ///         [PRF] PROTECTIVE FLOORING
        ///         [PSF] PORT SECURITY FEE
        ///         [PSS] PEAK SEASON SURCHARGE
        ///         [PST] PROVINCIAL SALES TAX
        ///         [PUP] PICKUP
        ///         [QST] QUEBEC SALES TAX
        ///         [RBC] RE-BILL CHARGE
        ///         [RCC] RECONSIGN / DIVERSION
        ///         [RCF] RECOVERY FEE
        ///         [RCL] REDELIVERY
        ///         [RCM] RECONSIGNMENT
        ///         [REB] CUSTOMER REBATE / INCENTIVE
        ///         [RLD] RESIDENTIAL DELIVERY
        ///         [RLP] RESIDENTIAL PICKUP
        ///         [RPK] REPACK
        ///         [RWD] REWEIGH AND DIMENSION
        ///         [SC] STAIR CARRY
        ///         [SCW] STAIR CARRY WEIGHT RATED
        ///         [SDA] SPECIAL DELIVERY AFTER HOURS
        ///         [SDW] SPECIAL DELIVERY WEEKEND
        ///         [SDY] SPECIAL DELIVERY HOLIDAY
        ///         [SEB] SINGLE ENTRY BOND
        ///         [SEC] SECURITY SURCHARGE
        ///         [SED] SHIPPERS EXPORT DECLARATION
        ///         [SEM] SEMINAR FEES
        ///         [SIG] SIGNATURE SERVICE
        ///         [SIL] STEEL IMPORT LICENSE
        ///         [SMR] SEMINAR
        ///         [SP] SHORT PAY AUTHORIZED
        ///         [SPA] SPECIAL PICKUP AFTER HOURS
        ///         [SPD] SPECIAL DELIVERY
        ///         [SPH] SPECIAL HANDLING SERVICES
        ///         [SPP] SPECIAL PICKUP
        ///         [SPW] SPECIAL PICKUP WEEKEND
        ///         [SPY] SPECIAL PICKUP HOLIDAY
        ///         [SRG] SEGREGATION
        ///         [SSB] STEAMSHIP LINE BILL OF LADING
        ///         [SSP] SERVICE CENTER PERCENTAGE
        ///         [STB] SINGLE TRANSACTION BOND
        ///         [STD] STORAGE DESTINATION
        ///         [STF] CONTAINER STUFFING
        ///         [STG] STORAGE
        ///         [STO] STORAGE ORIGIN
        ///         [STP] STOP OFF
        ///         [SVU] SERVICE UPGRADE
        ///         [SZD] SPECIAL DELIVERY - ZONE CHARGE
        ///         [SZP] SPECIAL PICKUP - ZONE CHARGE
        ///         [T&amp;F] OTHER DUTY TAXES &amp; FEES
        ///         [TAR] TARIFF FILING FEES
        ///         [THC] TERMINAL HANDLING
        ///         [TKP] PU AT TRK TRMNL OFF AIRPORT
        ///         [TRL] TRANSLOAD
        ///         [TRR] TRASH REMOVAL
        ///         [TSD] APT TIER SURCHARGE - DEL
        ///         [TSH] TRADE SHOW HANDLING
        ///         [TSP] APT TIER SURCHARGE - PU
        ///         [TST] TESTING CHARGE
        ///         [TTC] TEAM TECH COMMERCIAL
        ///         [TTD] TEAM TECH DELIVERY
        ///         [TTR] TEAM TECH RESIDENTIAL
        ///         [TYD] TEAM TECH BEYOND DELIVERY
        ///         [UNL] UNLOADING
        ///         [UPK] UNPACK
        ///         [VAC] VACIS EXAMINATION
        ///         [VAT] VAT
        ///         [VGM] VERIFIED GROSS WEIGHT
        ///         [VLD] VERIFY LIFTGATE REQUIRED DEL
        ///         [VLP] VERIFY LIFTGATE REQUIRED PU
        ///         [VPK] VERIFY PROPERLY PACKED
        ///         [WED] WEEKEND DELIVERY
        ///         [WEP] WEEKEND PICKUP
        ///         [WFG] WHARFAGE
        ///         [WGD] WHITE GLOVE DELIVERY
        ///         [WHI] WAREHOUSE IN
        ///         [WHO] WAREHOUSE OUT
        ///         [WHS] WAREHOUSING
        ///         [WHX] WAREHOUSE TRANSFER
        ///         [WIO] WAREHOUSING, IN &amp; OUT
        ///         [WT] WAIT TIME
        ///         [WTC] WAIT TIME FOR CONTAINERS
        ///         [WTD] WAIT TIME AT DESTINATION
        ///         [WTP] WAIT TIME AT ORIGIN
        ///         [WWD] WAREHOUSE WITHDRAWALS
        ///         [XAD] EXTENDED AFTER HOURS DELIVERY
        ///         [XAP] EXTENDED AFTER HOURS PICKUP
        ///         [XDP] EXTD DIST TRUCK TERM DROP
        ///         [XDR] EXTRA DRAYAGE
        ///         [XEX] X-RAY EXAM FEE
        ///         [XFR] TRANSFER
        ///         [XRC] EXTD DIST TRUCK TERM RECOVERY
        ///         [XRT] EXTRA ROUND TRIP
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; } = "[FRT] FREIGHT CHARGE";
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = "USD";
    
        /// <summary>Comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Comment { get; set; }
    
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate4 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [2H] TWO MAN SVCS - 1 HR MINIMUM
        ///         [2M] TWO MAN SVC - PER 1/4 HOUR
        ///         [2MD] TWO MAN DELIVERY
        ///         [2MP] TWO MAN PICKUP
        ///         [2T] TWO MAN SVCS - 2 HR MIN
        ///         [3M] THREE MAN SERVICE
        ///         [4M] FOUR MAN SERVICE
        ///         [ACC] ALAMEDA CORRIDOR CHARGE
        ///         [ACD] ADVANCED CHARGES DESTINATION
        ///         [ACO] ADVANCED CHARGES ORIGIN
        ///         [ADC] ADDRESS CORRECTION
        ///         [ADF] ADVANCED DUTY FEE
        ///         [ADL] ATTEMPTED DELIVERY
        ///         [ADM] ADMINISTRATION FEE
        ///         [ADR] AIRPORT DROP OR RECOVERY
        ///         [ADU] ANTI-DUMPING FEE
        ///         [ADV] ADVANCE CHECK FEE
        ///         [AES] AES FEE
        ///         [AGI] AGRICULTURAL HOLD
        ///         [AHD] AFTER HOURS DELIVERY
        ///         [AHP] AFTER HOURS PICKUP
        ///         [ALC] ALL CARGO
        ///         [ALH] AIRLINE HANDLING
        ///         [AMC] ADDITIONAL MACHINE
        ///         [AMS] AMS FEE
        ///         [APD] APPOINTMENT DELIVERY
        ///         [APP] APPOINTMENT PICKUP
        ///         [APQ] ANIMAL PLANT QUARANTINE
        ///         [APS] AGENT PROFIT SPLIT
        ///         [AQI] AGRICULTURAL CHARGE
        ///         [ATP] ATTEMPTED PICKUP
        ///         [ATX] AIRLINE TAX
        ///         [AWB] AIR WAYBILL FEE
        ///         [BAF] BUNKER ADJUSTMENT FACTOR
        ///         [BBK] BROKERAGE ON BREAKBULK
        ///         [BFI] BAF INCREASE
        ///         [BLP] BILL OF LADING PREPARATION
        ///         [BND] BOND CHARGES
        ///         [BOL] BILL OF LADING FEE
        ///         [BPF] BOND PREPARATION FEE
        ///         [BRK] BROKERAGE
        ///         [BSD] BEYOND SPECIAL DELIVERY
        ///         [BSP] BEYOND SPECIAL PICKUP
        ///         [BYD] BEYOND DELIVERY
        ///         [BYP] BEYOND PICKUP
        ///         [C&amp;A] CVD/ADD DUTY
        ///         [CBF] CUSTOMS BOND FEE
        ///         [CBP] CONTINUOUS ENTRY BOND
        ///         [CDF] C.O.D. FEE
        ///         [CEX] CUSTOMS EXAM FEE
        ///         [CFO] COLLECT OCEAN FRT
        ///         [CFS] CFS CHARGES
        ///         [CGS] CARGO SCREENING
        ///         [CHS] CHASSIS CHARGE
        ///         [CHZ] CHECK FOR HAZ MAT
        ///         [CLD] CONTAINER LOADING
        ///         [CLE] CLEARANCE AND HANDLING
        ///         [CLR] CUSTOMS CLEARANCE &amp; HANDLING
        ///         [CM] CONVENTION MATERIAL
        ///         [CMD] CONVENTION CENTER DELIVERY
        ///         [CMP] CONVENTION CENTER PICKUP
        ///         [CO] CERTIFICATE OF ORIGIN
        ///         [COC] COORDINATION AND CONTROL
        ///         [COD] C.O.D. MONEY
        ///         [COF] CERTIFICATE OF ORIGIN FEE
        ///         [COL] COLLECTION FEE
        ///         [CON] CONSULTING SERVICES
        ///         [COR] COURIER
        ///         [CPF] CONSOL / PORT SERVICE FEE
        ///         [CPY] COPY OF DOCUMENT OR POD
        ///         [CR] CREDIT
        ///         [CRE] CRANE CHARGES
        ///         [CRN] PRESENTATION OF CARNET
        ///         [CRS] CROSS DOCK FEES
        ///         [CRT] CRATING &amp; PACKAGING
        ///         [CSD] CONTACT SHIPPER FOR DETAILS
        ///         [CST] CUSTOMS TITLE SEARCH
        ///         [CTF] CLEAN TRUCK FEE
        ///         [CTG] CARTAGE
        ///         [CVC] CONVENTION CENTER FEE
        ///         [CXB] CONTAINER BUILDUP
        ///         [DAD] DAD/DOC/WHSE
        ///         [DAP] DELIVERED AT PLACE
        ///         [DCR] DOMINICAN CONTAINER RELEASE
        ///         [DDP] DELIVERY DUTY PAID
        ///         [DEM] DEMURRAGE
        ///         [DET] DETENTION
        ///         [DGC] DANGEROUS GOODS CERTIFICATE
        ///         [DGR] DANGEROUS GOODS
        ///         [DIM] HEAVY / DIM WEIGHT
        ///         [DIV] DIVERSION FEE
        ///         [DK] DOCKS &amp; PIERS
        ///         [DKD] DOCKS/PIERS DELIVERY
        ///         [DKP] DOCKS/PIERS PICKUP
        ///         [DLR] DELIVERY
        ///         [DO] DELIVERY ORDER
        ///         [DOC] DOCUMENTATION
        ///         [DPF] DROP FEE
        ///         [DRH] DR HANDLING
        ///         [DRY] DRAYAGE
        ///         [DSB] DISBURSEMENT FEE
        ///         [DST] DESTINATION CHARGES
        ///         [DTO] DOCUMENT TURNOVER
        ///         [DTQ] DUTY - SUBJECT TO LIQUIDATION
        ///         [DTY] DUTY AND TAXES
        ///         [DVF] DECLARED VALUE FEE
        ///         [EDF] EXPORT DECLARATION FEE
        ///         [EDH] EXPORT DECLARATION HANDLING
        ///         [EFH] ENTRY FEE &amp; HANDLING
        ///         [EHD] EXPORT HANDLING
        ///         [EOV] EXTRAORDINARY VALUE ITEMS
        ///         [ERO] ERRORS &amp; OMISSIONS POLICY
        ///         [EUC] EU CUSTOMS FEE
        ///         [EUD] EXCLUSIVE USE VEHICLE DELIVERY
        ///         [EUP] EXCLUSIVE USE VEHICLE PICKUP
        ///         [EUV] EXCLUSIVE USE VEHICLE
        ///         [EVD] EOV, HANDLE WITH CARE (D)
        ///         [EVP] EOV, HANDLE WITH CARE (P)
        ///         [EXM] EXAMINATION COORDINATION
        ///         [FCC] FEE FOR COLLECT CHARGES
        ///         [FCL] FREIGHT CHARGE COLLECT FEE
        ///         [FDA] FOOD &amp; DRUG ENTRY
        ///         [FIN] FINANCE CHARGES
        ///         [FKL] FORKLIFT FEE
        ///         [FRD] FREIGHT DISCOUNT
        ///         [FRT] FREIGHT CHARGE
        ///         [FSC] FUEL SURCHARGE
        ///         [FSD] FUEL SURCHARGE GROUND
        ///         [FSJ] FUEL SURCHARGE AIR
        ///         [FWD] FORWARDING CHARGES
        ///         [GRI] GENERAL RATE INCREASE
        ///         [GST] GOODS AND SERVICES TAX
        ///         [H&amp;M] HOTELS &amp; MALLS
        ///         [HAF] HOUSE AIRFREIGHT
        ///         [HAP] HOLD AT AIRPORT
        ///         [HAZ] HAZARDOUS MATERIALS
        ///         [HD1] HANDLING CHARGES (HD1)
        ///         [HKD] HONG KONG DELIVERY ORDER
        ///         [HKE] HK EXPORT DECLARATION AND FEES
        ///         [HKG] HONG KONG GATE CHARGES
        ///         [HLS] HEAVY LIFT SURCHARGE
        ///         [HMA] ACCESSIBLE HAZ MAT
        ///         [HMF] HARBOR MAINTENANCE FEES
        ///         [HMI] INACCESSIBLE HAZ MAT
        ///         [HND] HANDLING CHARGES
        ///         [HOF] OCEAN FREIGHT
        ///         [HPU] HOLD FOR PICKUP
        ///         [HST] HARMONIZED SALES TAX
        ///         [IEF] IE FEE &amp; HANDLING
        ///         [IHD] IMPORT HANDLING
        ///         [IND] INSIDE DELIVERY
        ///         [INH] INSIDE CHARGE - 1 HR MIN
        ///         [INL] INLAND FRT
        ///         [INP] INSIDE PICKUP
        ///         [INS] INSURANCE AND SERVICES
        ///         [INT] INTEREST
        ///         [IOF] OCEAN FREIGHT B/B
        ///         [IPI] IPI FEE
        ///         [IPR] IPPC PALLET REPLACEMENT
        ///         [ISC] AIRLINE SERVICE FEE
        ///         [ISF] ISF FILING FEE &amp; HANDLING
        ///         [ISP] INSPECTION SERVICES
        ///         [ITF] I.T. FEE &amp; HANDLING
        ///         [ITV] I.T. VALIDATION FEE
        ///         [L/S] LUMP SUM
        ///         [LAD] LIMITED ACCESS DELIVERY
        ///         [LAP] LIMITED ACCESS PICKUP
        ///         [LDL] LOCAL DELIVERY
        ///         [LEG] LEGALIZATION
        ///         [LF] LOCATION FEE
        ///         [LG] LIFTGATE
        ///         [LGD] LIFTGATE DELIVERY
        ///         [LGP] LIFTGATE PICKUP
        ///         [LH] LINE HAUL
        ///         [LOC] LETTER OF CREDIT
        ///         [MBD] MILITARY BASE DELIVERY
        ///         [MBP] MILITARY BASE PICKUP
        ///         [MFD] MASONITE FLOOR DELIVERY
        ///         [MFP] MASONITE FLOOR PICKUP
        ///         [MHF] MERCHANDISE PROC/HARBOR MAINT
        ///         [MIS] MISCELLANEOUS
        ///         [MS2] COURIER (MS2)
        ///         [MSE] MERCHANDISE PROCESSING FEE
        ///         [MSG] MESSENGER FEE
        ///         [MYF] MARSHALLING YARD FEE
        ///         [NAB] NEXT DAY AM BEYOND
        ///         [NAV] NAVCAN
        ///         [NCD] NOTIFY CTRL IF PROBLEMS DEL
        ///         [NCF] NAV CAN FEE
        ///         [NCP] NOTIFY CTRL IF PROBLEMS PICKUP
        ///         [NFB] NFO BEYOND
        ///         [NRF] NON-RESIDENTIAL FEE
        ///         [NSF] NON-SUFFICIENT FUNDS FEES
        ///         [OHR] ON HAND REFUSED SHIPMENT CHG
        ///         [ONC] ON-CARRIAGE
        ///         [OND] O/N DEL BEFORE NOON
        ///         [OPH] OCEAN PORT HANDLING
        ///         [OPS] OCEAN P/S
        ///         [ORG] ORIGIN FEE
        ///         [ORI] ORION FEE
        ///         [OSD] OVERSIZE DELIVERY
        ///         [OSP] OVERSIZE PICKUP
        ///         [OSZ] OVERSIZE SURCHARGE
        ///         [OT] OVERTIME/WEEKEND
        ///         [OTC] OVER THE COUNTER
        ///         [OTH] OTHER CHARGE
        ///         [OTL] OUTLAY FOR ADDITIONAL CHARGES
        ///         [OZ1] OVERSIZE TIER 1
        ///         [OZ2] OVERSIZE TIER 2
        ///         [OZ3] OVERSIZE TIER 3
        ///         [P/S] PROFIT SPLIT
        ///         [PCS] PANAMA CANAL SURCHARGE
        ///         [PDE] PROOF OF DELIVERY (ELECTRONIC)
        ///         [PE] PERSONAL EFFECTS
        ///         [PEN] POST ENTRY SERVICES
        ///         [PFA] AIRFREIGHT LESS IATA
        ///         [PJ] PALLET JACK CHARGE
        ///         [PPF] PIER PASS FEE
        ///         [PRC] PRE-CARRIAGE
        ///         [PRF] PROTECTIVE FLOORING
        ///         [PSF] PORT SECURITY FEE
        ///         [PSS] PEAK SEASON SURCHARGE
        ///         [PST] PROVINCIAL SALES TAX
        ///         [PUP] PICKUP
        ///         [QST] QUEBEC SALES TAX
        ///         [RBC] RE-BILL CHARGE
        ///         [RCC] RECONSIGN / DIVERSION
        ///         [RCF] RECOVERY FEE
        ///         [RCL] REDELIVERY
        ///         [RCM] RECONSIGNMENT
        ///         [REB] CUSTOMER REBATE / INCENTIVE
        ///         [RLD] RESIDENTIAL DELIVERY
        ///         [RLP] RESIDENTIAL PICKUP
        ///         [RPK] REPACK
        ///         [RWD] REWEIGH AND DIMENSION
        ///         [SC] STAIR CARRY
        ///         [SCW] STAIR CARRY WEIGHT RATED
        ///         [SDA] SPECIAL DELIVERY AFTER HOURS
        ///         [SDW] SPECIAL DELIVERY WEEKEND
        ///         [SDY] SPECIAL DELIVERY HOLIDAY
        ///         [SEB] SINGLE ENTRY BOND
        ///         [SEC] SECURITY SURCHARGE
        ///         [SED] SHIPPERS EXPORT DECLARATION
        ///         [SEM] SEMINAR FEES
        ///         [SIG] SIGNATURE SERVICE
        ///         [SIL] STEEL IMPORT LICENSE
        ///         [SMR] SEMINAR
        ///         [SP] SHORT PAY AUTHORIZED
        ///         [SPA] SPECIAL PICKUP AFTER HOURS
        ///         [SPD] SPECIAL DELIVERY
        ///         [SPH] SPECIAL HANDLING SERVICES
        ///         [SPP] SPECIAL PICKUP
        ///         [SPW] SPECIAL PICKUP WEEKEND
        ///         [SPY] SPECIAL PICKUP HOLIDAY
        ///         [SRG] SEGREGATION
        ///         [SSB] STEAMSHIP LINE BILL OF LADING
        ///         [SSP] SERVICE CENTER PERCENTAGE
        ///         [STB] SINGLE TRANSACTION BOND
        ///         [STD] STORAGE DESTINATION
        ///         [STF] CONTAINER STUFFING
        ///         [STG] STORAGE
        ///         [STO] STORAGE ORIGIN
        ///         [STP] STOP OFF
        ///         [SVU] SERVICE UPGRADE
        ///         [SZD] SPECIAL DELIVERY - ZONE CHARGE
        ///         [SZP] SPECIAL PICKUP - ZONE CHARGE
        ///         [T&amp;F] OTHER DUTY TAXES &amp; FEES
        ///         [TAR] TARIFF FILING FEES
        ///         [THC] TERMINAL HANDLING
        ///         [TKP] PU AT TRK TRMNL OFF AIRPORT
        ///         [TRL] TRANSLOAD
        ///         [TRR] TRASH REMOVAL
        ///         [TSD] APT TIER SURCHARGE - DEL
        ///         [TSH] TRADE SHOW HANDLING
        ///         [TSP] APT TIER SURCHARGE - PU
        ///         [TST] TESTING CHARGE
        ///         [TTC] TEAM TECH COMMERCIAL
        ///         [TTD] TEAM TECH DELIVERY
        ///         [TTR] TEAM TECH RESIDENTIAL
        ///         [TYD] TEAM TECH BEYOND DELIVERY
        ///         [UNL] UNLOADING
        ///         [UPK] UNPACK
        ///         [VAC] VACIS EXAMINATION
        ///         [VAT] VAT
        ///         [VGM] VERIFIED GROSS WEIGHT
        ///         [VLD] VERIFY LIFTGATE REQUIRED DEL
        ///         [VLP] VERIFY LIFTGATE REQUIRED PU
        ///         [VPK] VERIFY PROPERLY PACKED
        ///         [WED] WEEKEND DELIVERY
        ///         [WEP] WEEKEND PICKUP
        ///         [WFG] WHARFAGE
        ///         [WGD] WHITE GLOVE DELIVERY
        ///         [WHI] WAREHOUSE IN
        ///         [WHO] WAREHOUSE OUT
        ///         [WHS] WAREHOUSING
        ///         [WHX] WAREHOUSE TRANSFER
        ///         [WIO] WAREHOUSING, IN &amp; OUT
        ///         [WT] WAIT TIME
        ///         [WTC] WAIT TIME FOR CONTAINERS
        ///         [WTD] WAIT TIME AT DESTINATION
        ///         [WTP] WAIT TIME AT ORIGIN
        ///         [WWD] WAREHOUSE WITHDRAWALS
        ///         [XAD] EXTENDED AFTER HOURS DELIVERY
        ///         [XAP] EXTENDED AFTER HOURS PICKUP
        ///         [XDP] EXTD DIST TRUCK TERM DROP
        ///         [XDR] EXTRA DRAYAGE
        ///         [XEX] X-RAY EXAM FEE
        ///         [XFR] TRANSFER
        ///         [XRC] EXTD DIST TRUCK TERM RECOVERY
        ///         [XRT] EXTRA ROUND TRIP
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; } = "[FRT] FREIGHT CHARGE";
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = "USD";
    
        /// <summary>Comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Comment { get; set; }
    
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate4 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [2H] TWO MAN SVCS - 1 HR MINIMUM
        ///         [2M] TWO MAN SVC - PER 1/4 HOUR
        ///         [2MD] TWO MAN DELIVERY
        ///         [2MP] TWO MAN PICKUP
        ///         [2T] TWO MAN SVCS - 2 HR MIN
        ///         [3M] THREE MAN SERVICE
        ///         [4M] FOUR MAN SERVICE
        ///         [ACC] ALAMEDA CORRIDOR CHARGE
        ///         [ACD] ADVANCED CHARGES DESTINATION
        ///         [ACO] ADVANCED CHARGES ORIGIN
        ///         [ADC] ADDRESS CORRECTION
        ///         [ADF] ADVANCED DUTY FEE
        ///         [ADL] ATTEMPTED DELIVERY
        ///         [ADM] ADMINISTRATION FEE
        ///         [ADR] AIRPORT DROP OR RECOVERY
        ///         [ADU] ANTI-DUMPING FEE
        ///         [ADV] ADVANCE CHECK FEE
        ///         [AES] AES FEE
        ///         [AGI] AGRICULTURAL HOLD
        ///         [AHD] AFTER HOURS DELIVERY
        ///         [AHP] AFTER HOURS PICKUP
        ///         [ALC] ALL CARGO
        ///         [ALH] AIRLINE HANDLING
        ///         [AMC] ADDITIONAL MACHINE
        ///         [AMS] AMS FEE
        ///         [APD] APPOINTMENT DELIVERY
        ///         [APP] APPOINTMENT PICKUP
        ///         [APQ] ANIMAL PLANT QUARANTINE
        ///         [APS] AGENT PROFIT SPLIT
        ///         [AQI] AGRICULTURAL CHARGE
        ///         [ATP] ATTEMPTED PICKUP
        ///         [ATX] AIRLINE TAX
        ///         [AWB] AIR WAYBILL FEE
        ///         [BAF] BUNKER ADJUSTMENT FACTOR
        ///         [BBK] BROKERAGE ON BREAKBULK
        ///         [BFI] BAF INCREASE
        ///         [BLP] BILL OF LADING PREPARATION
        ///         [BND] BOND CHARGES
        ///         [BOL] BILL OF LADING FEE
        ///         [BPF] BOND PREPARATION FEE
        ///         [BRK] BROKERAGE
        ///         [BSD] BEYOND SPECIAL DELIVERY
        ///         [BSP] BEYOND SPECIAL PICKUP
        ///         [BYD] BEYOND DELIVERY
        ///         [BYP] BEYOND PICKUP
        ///         [C&amp;A] CVD/ADD DUTY
        ///         [CBF] CUSTOMS BOND FEE
        ///         [CBP] CONTINUOUS ENTRY BOND
        ///         [CDF] C.O.D. FEE
        ///         [CEX] CUSTOMS EXAM FEE
        ///         [CFO] COLLECT OCEAN FRT
        ///         [CFS] CFS CHARGES
        ///         [CGS] CARGO SCREENING
        ///         [CHS] CHASSIS CHARGE
        ///         [CHZ] CHECK FOR HAZ MAT
        ///         [CLD] CONTAINER LOADING
        ///         [CLE] CLEARANCE AND HANDLING
        ///         [CLR] CUSTOMS CLEARANCE &amp; HANDLING
        ///         [CM] CONVENTION MATERIAL
        ///         [CMD] CONVENTION CENTER DELIVERY
        ///         [CMP] CONVENTION CENTER PICKUP
        ///         [CO] CERTIFICATE OF ORIGIN
        ///         [COC] COORDINATION AND CONTROL
        ///         [COD] C.O.D. MONEY
        ///         [COF] CERTIFICATE OF ORIGIN FEE
        ///         [COL] COLLECTION FEE
        ///         [CON] CONSULTING SERVICES
        ///         [COR] COURIER
        ///         [CPF] CONSOL / PORT SERVICE FEE
        ///         [CPY] COPY OF DOCUMENT OR POD
        ///         [CR] CREDIT
        ///         [CRE] CRANE CHARGES
        ///         [CRN] PRESENTATION OF CARNET
        ///         [CRS] CROSS DOCK FEES
        ///         [CRT] CRATING &amp; PACKAGING
        ///         [CSD] CONTACT SHIPPER FOR DETAILS
        ///         [CST] CUSTOMS TITLE SEARCH
        ///         [CTF] CLEAN TRUCK FEE
        ///         [CTG] CARTAGE
        ///         [CVC] CONVENTION CENTER FEE
        ///         [CXB] CONTAINER BUILDUP
        ///         [DAD] DAD/DOC/WHSE
        ///         [DAP] DELIVERED AT PLACE
        ///         [DCR] DOMINICAN CONTAINER RELEASE
        ///         [DDP] DELIVERY DUTY PAID
        ///         [DEM] DEMURRAGE
        ///         [DET] DETENTION
        ///         [DGC] DANGEROUS GOODS CERTIFICATE
        ///         [DGR] DANGEROUS GOODS
        ///         [DIM] HEAVY / DIM WEIGHT
        ///         [DIV] DIVERSION FEE
        ///         [DK] DOCKS &amp; PIERS
        ///         [DKD] DOCKS/PIERS DELIVERY
        ///         [DKP] DOCKS/PIERS PICKUP
        ///         [DLR] DELIVERY
        ///         [DO] DELIVERY ORDER
        ///         [DOC] DOCUMENTATION
        ///         [DPF] DROP FEE
        ///         [DRH] DR HANDLING
        ///         [DRY] DRAYAGE
        ///         [DSB] DISBURSEMENT FEE
        ///         [DST] DESTINATION CHARGES
        ///         [DTO] DOCUMENT TURNOVER
        ///         [DTQ] DUTY - SUBJECT TO LIQUIDATION
        ///         [DTY] DUTY AND TAXES
        ///         [DVF] DECLARED VALUE FEE
        ///         [EDF] EXPORT DECLARATION FEE
        ///         [EDH] EXPORT DECLARATION HANDLING
        ///         [EFH] ENTRY FEE &amp; HANDLING
        ///         [EHD] EXPORT HANDLING
        ///         [EOV] EXTRAORDINARY VALUE ITEMS
        ///         [ERO] ERRORS &amp; OMISSIONS POLICY
        ///         [EUC] EU CUSTOMS FEE
        ///         [EUD] EXCLUSIVE USE VEHICLE DELIVERY
        ///         [EUP] EXCLUSIVE USE VEHICLE PICKUP
        ///         [EUV] EXCLUSIVE USE VEHICLE
        ///         [EVD] EOV, HANDLE WITH CARE (D)
        ///         [EVP] EOV, HANDLE WITH CARE (P)
        ///         [EXM] EXAMINATION COORDINATION
        ///         [FCC] FEE FOR COLLECT CHARGES
        ///         [FCL] FREIGHT CHARGE COLLECT FEE
        ///         [FDA] FOOD &amp; DRUG ENTRY
        ///         [FIN] FINANCE CHARGES
        ///         [FKL] FORKLIFT FEE
        ///         [FRD] FREIGHT DISCOUNT
        ///         [FRT] FREIGHT CHARGE
        ///         [FSC] FUEL SURCHARGE
        ///         [FSD] FUEL SURCHARGE GROUND
        ///         [FSJ] FUEL SURCHARGE AIR
        ///         [FWD] FORWARDING CHARGES
        ///         [GRI] GENERAL RATE INCREASE
        ///         [GST] GOODS AND SERVICES TAX
        ///         [H&amp;M] HOTELS &amp; MALLS
        ///         [HAF] HOUSE AIRFREIGHT
        ///         [HAP] HOLD AT AIRPORT
        ///         [HAZ] HAZARDOUS MATERIALS
        ///         [HD1] HANDLING CHARGES (HD1)
        ///         [HKD] HONG KONG DELIVERY ORDER
        ///         [HKE] HK EXPORT DECLARATION AND FEES
        ///         [HKG] HONG KONG GATE CHARGES
        ///         [HLS] HEAVY LIFT SURCHARGE
        ///         [HMA] ACCESSIBLE HAZ MAT
        ///         [HMF] HARBOR MAINTENANCE FEES
        ///         [HMI] INACCESSIBLE HAZ MAT
        ///         [HND] HANDLING CHARGES
        ///         [HOF] OCEAN FREIGHT
        ///         [HPU] HOLD FOR PICKUP
        ///         [HST] HARMONIZED SALES TAX
        ///         [IEF] IE FEE &amp; HANDLING
        ///         [IHD] IMPORT HANDLING
        ///         [IND] INSIDE DELIVERY
        ///         [INH] INSIDE CHARGE - 1 HR MIN
        ///         [INL] INLAND FRT
        ///         [INP] INSIDE PICKUP
        ///         [INS] INSURANCE AND SERVICES
        ///         [INT] INTEREST
        ///         [IOF] OCEAN FREIGHT B/B
        ///         [IPI] IPI FEE
        ///         [IPR] IPPC PALLET REPLACEMENT
        ///         [ISC] AIRLINE SERVICE FEE
        ///         [ISF] ISF FILING FEE &amp; HANDLING
        ///         [ISP] INSPECTION SERVICES
        ///         [ITF] I.T. FEE &amp; HANDLING
        ///         [ITV] I.T. VALIDATION FEE
        ///         [L/S] LUMP SUM
        ///         [LAD] LIMITED ACCESS DELIVERY
        ///         [LAP] LIMITED ACCESS PICKUP
        ///         [LDL] LOCAL DELIVERY
        ///         [LEG] LEGALIZATION
        ///         [LF] LOCATION FEE
        ///         [LG] LIFTGATE
        ///         [LGD] LIFTGATE DELIVERY
        ///         [LGP] LIFTGATE PICKUP
        ///         [LH] LINE HAUL
        ///         [LOC] LETTER OF CREDIT
        ///         [MBD] MILITARY BASE DELIVERY
        ///         [MBP] MILITARY BASE PICKUP
        ///         [MFD] MASONITE FLOOR DELIVERY
        ///         [MFP] MASONITE FLOOR PICKUP
        ///         [MHF] MERCHANDISE PROC/HARBOR MAINT
        ///         [MIS] MISCELLANEOUS
        ///         [MS2] COURIER (MS2)
        ///         [MSE] MERCHANDISE PROCESSING FEE
        ///         [MSG] MESSENGER FEE
        ///         [MYF] MARSHALLING YARD FEE
        ///         [NAB] NEXT DAY AM BEYOND
        ///         [NAV] NAVCAN
        ///         [NCD] NOTIFY CTRL IF PROBLEMS DEL
        ///         [NCF] NAV CAN FEE
        ///         [NCP] NOTIFY CTRL IF PROBLEMS PICKUP
        ///         [NFB] NFO BEYOND
        ///         [NRF] NON-RESIDENTIAL FEE
        ///         [NSF] NON-SUFFICIENT FUNDS FEES
        ///         [OHR] ON HAND REFUSED SHIPMENT CHG
        ///         [ONC] ON-CARRIAGE
        ///         [OND] O/N DEL BEFORE NOON
        ///         [OPH] OCEAN PORT HANDLING
        ///         [OPS] OCEAN P/S
        ///         [ORG] ORIGIN FEE
        ///         [ORI] ORION FEE
        ///         [OSD] OVERSIZE DELIVERY
        ///         [OSP] OVERSIZE PICKUP
        ///         [OSZ] OVERSIZE SURCHARGE
        ///         [OT] OVERTIME/WEEKEND
        ///         [OTC] OVER THE COUNTER
        ///         [OTH] OTHER CHARGE
        ///         [OTL] OUTLAY FOR ADDITIONAL CHARGES
        ///         [OZ1] OVERSIZE TIER 1
        ///         [OZ2] OVERSIZE TIER 2
        ///         [OZ3] OVERSIZE TIER 3
        ///         [P/S] PROFIT SPLIT
        ///         [PCS] PANAMA CANAL SURCHARGE
        ///         [PDE] PROOF OF DELIVERY (ELECTRONIC)
        ///         [PE] PERSONAL EFFECTS
        ///         [PEN] POST ENTRY SERVICES
        ///         [PFA] AIRFREIGHT LESS IATA
        ///         [PJ] PALLET JACK CHARGE
        ///         [PPF] PIER PASS FEE
        ///         [PRC] PRE-CARRIAGE
        ///         [PRF] PROTECTIVE FLOORING
        ///         [PSF] PORT SECURITY FEE
        ///         [PSS] PEAK SEASON SURCHARGE
        ///         [PST] PROVINCIAL SALES TAX
        ///         [PUP] PICKUP
        ///         [QST] QUEBEC SALES TAX
        ///         [RBC] RE-BILL CHARGE
        ///         [RCC] RECONSIGN / DIVERSION
        ///         [RCF] RECOVERY FEE
        ///         [RCL] REDELIVERY
        ///         [RCM] RECONSIGNMENT
        ///         [REB] CUSTOMER REBATE / INCENTIVE
        ///         [RLD] RESIDENTIAL DELIVERY
        ///         [RLP] RESIDENTIAL PICKUP
        ///         [RPK] REPACK
        ///         [RWD] REWEIGH AND DIMENSION
        ///         [SC] STAIR CARRY
        ///         [SCW] STAIR CARRY WEIGHT RATED
        ///         [SDA] SPECIAL DELIVERY AFTER HOURS
        ///         [SDW] SPECIAL DELIVERY WEEKEND
        ///         [SDY] SPECIAL DELIVERY HOLIDAY
        ///         [SEB] SINGLE ENTRY BOND
        ///         [SEC] SECURITY SURCHARGE
        ///         [SED] SHIPPERS EXPORT DECLARATION
        ///         [SEM] SEMINAR FEES
        ///         [SIG] SIGNATURE SERVICE
        ///         [SIL] STEEL IMPORT LICENSE
        ///         [SMR] SEMINAR
        ///         [SP] SHORT PAY AUTHORIZED
        ///         [SPA] SPECIAL PICKUP AFTER HOURS
        ///         [SPD] SPECIAL DELIVERY
        ///         [SPH] SPECIAL HANDLING SERVICES
        ///         [SPP] SPECIAL PICKUP
        ///         [SPW] SPECIAL PICKUP WEEKEND
        ///         [SPY] SPECIAL PICKUP HOLIDAY
        ///         [SRG] SEGREGATION
        ///         [SSB] STEAMSHIP LINE BILL OF LADING
        ///         [SSP] SERVICE CENTER PERCENTAGE
        ///         [STB] SINGLE TRANSACTION BOND
        ///         [STD] STORAGE DESTINATION
        ///         [STF] CONTAINER STUFFING
        ///         [STG] STORAGE
        ///         [STO] STORAGE ORIGIN
        ///         [STP] STOP OFF
        ///         [SVU] SERVICE UPGRADE
        ///         [SZD] SPECIAL DELIVERY - ZONE CHARGE
        ///         [SZP] SPECIAL PICKUP - ZONE CHARGE
        ///         [T&amp;F] OTHER DUTY TAXES &amp; FEES
        ///         [TAR] TARIFF FILING FEES
        ///         [THC] TERMINAL HANDLING
        ///         [TKP] PU AT TRK TRMNL OFF AIRPORT
        ///         [TRL] TRANSLOAD
        ///         [TRR] TRASH REMOVAL
        ///         [TSD] APT TIER SURCHARGE - DEL
        ///         [TSH] TRADE SHOW HANDLING
        ///         [TSP] APT TIER SURCHARGE - PU
        ///         [TST] TESTING CHARGE
        ///         [TTC] TEAM TECH COMMERCIAL
        ///         [TTD] TEAM TECH DELIVERY
        ///         [TTR] TEAM TECH RESIDENTIAL
        ///         [TYD] TEAM TECH BEYOND DELIVERY
        ///         [UNL] UNLOADING
        ///         [UPK] UNPACK
        ///         [VAC] VACIS EXAMINATION
        ///         [VAT] VAT
        ///         [VGM] VERIFIED GROSS WEIGHT
        ///         [VLD] VERIFY LIFTGATE REQUIRED DEL
        ///         [VLP] VERIFY LIFTGATE REQUIRED PU
        ///         [VPK] VERIFY PROPERLY PACKED
        ///         [WED] WEEKEND DELIVERY
        ///         [WEP] WEEKEND PICKUP
        ///         [WFG] WHARFAGE
        ///         [WGD] WHITE GLOVE DELIVERY
        ///         [WHI] WAREHOUSE IN
        ///         [WHO] WAREHOUSE OUT
        ///         [WHS] WAREHOUSING
        ///         [WHX] WAREHOUSE TRANSFER
        ///         [WIO] WAREHOUSING, IN &amp; OUT
        ///         [WT] WAIT TIME
        ///         [WTC] WAIT TIME FOR CONTAINERS
        ///         [WTD] WAIT TIME AT DESTINATION
        ///         [WTP] WAIT TIME AT ORIGIN
        ///         [WWD] WAREHOUSE WITHDRAWALS
        ///         [XAD] EXTENDED AFTER HOURS DELIVERY
        ///         [XAP] EXTENDED AFTER HOURS PICKUP
        ///         [XDP] EXTD DIST TRUCK TERM DROP
        ///         [XDR] EXTRA DRAYAGE
        ///         [XEX] X-RAY EXAM FEE
        ///         [XFR] TRANSFER
        ///         [XRC] EXTD DIST TRUCK TERM RECOVERY
        ///         [XRT] EXTRA ROUND TRIP
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; } = "[FRT] FREIGHT CHARGE";
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = "USD";
    
        /// <summary>Comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Comment { get; set; }
    
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProjectedExpenseShipmentBookingCreate 
    {
        [Newtonsoft.Json.JsonProperty("vendorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string VendorCode { get; set; }
    
        /// <summary>
        ///         [D] Delivery,
        ///         [P] Pickup/Procurement,
        ///         [T] Transfer
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; } = "[P] Pickup/Procurement";
    
        /// <summary>
        ///         [2H] TWO MAN SVCS - 1 HR MINIMUM
        ///         [2M] TWO MAN SVC - PER 1/4 HOUR
        ///         [2MD] TWO MAN DELIVERY
        ///         [2T] TWO MAN SVCS - 2 HR MIN
        ///         [3M] THREE MAN SERVICE
        ///         [4M] FOUR MAN SERVICE
        ///         [900] DUE ACS
        ///         [925] DUE NSC POOL
        ///         [950] DUE FB
        ///         [ACC] ALAMEDA CORRIDOR CHARGE
        ///         [ADF] ADVANCED DUTY FEE
        ///         [ADM] ADMINISTRATION FEE
        ///         [ADN] AGENT DEBIT NOTE
        ///         [ADR] AIRPORT DROP OR RECOVERY
        ///         [ADU] ANTI-DUMPING FEE
        ///         [ADV] ADVANCE CHECK FEE
        ///         [AES] AES FEE
        ///         [AGI] AGRICULTURAL HOLD
        ///         [ALH] AIRLINE HANDLING
        ///         [AMC] ADDITIONAL MACHINE
        ///         [APD] APPOINTMENT DELIVERY
        ///         [APP] APPOINTMENT PICKUP
        ///         [APQ] ANIMAL PLANT QUARANTINE
        ///         [AQI] AGRICULTURAL CHARGE
        ///         [ARD] A/R RESERVE DEPOSIT
        ///         [ATD] ATTEMPTED DELIVERY
        ///         [ATP] ATTEMPTED PICKUP
        ///         [AWB] AIR WAYBILL FEE
        ///         [BAF] BUNKER ADJUSTMENT FACTOR
        ///         [BBK] BROKERAGE ON BREAKBULK
        ///         [BFI] BAF INCREASE
        ///         [BKF] BOOKING FEE
        ///         [BLP] BILL OF LADING PREPARATION
        ///         [BND] BOND CHARGES
        ///         [BOL] BILL OF LADING FEE
        ///         [BPF] BOND PREPARATION FEE
        ///         [BRK] BROKERAGE
        ///         [C&amp;A] CVD/ADD DUTY
        ///         [CBF] CUSTOMS BOND FEE
        ///         [CBP] CONTINUOUS ENTRY BOND
        ///         [CCF] CREDIT CARD FEE
        ///         [CDF] C.O.D. FEE
        ///         [CEX] CUSTOMS EXAM FEE
        ///         [CFO] COLLECT OCEAN FRT
        ///         [CFS] CFS CHARGES
        ///         [CGS] CARGO SCREENING
        ///         [CHS] CHASSIS CHARGE
        ///         [CLD] CONTAINER LOADING
        ///         [CLE] CLEARANCE AND HANDLING
        ///         [CLR] CUSTOMS CLEARANCE &amp; HANDLING
        ///         [CM] CONVENTION MATERIAL
        ///         [CNF] CONTRACTOR FEE
        ///         [COC] COORDINATION AND CONTROL
        ///         [COL] COLLECTION FEE
        ///         [COM] COMMISSION ON FREIGHT
        ///         [COR] COURIER
        ///         [CPF] CONSOL / PORT SERVICE FEE
        ///         [CPY] COPY OF DOCUMENT OR POD
        ///         [CR] CREDIT
        ///         [CRE] CRANE CHARGES
        ///         [CRN] PRESENTATION OF CARNET
        ///         [CRS] CROSS DOCK FEES
        ///         [CRT] CRATING &amp; PACKAGING
        ///         [CST] CUSTOMS TITLE SEARCH
        ///         [CTF] CLEAN TRUCK FEE
        ///         [CTG] CARTAGE
        ///         [CXB] CONTAINER BUILDUP
        ///         [DAD] DAD/DOC/WHSE
        ///         [DAP] DELIVERED AT PLACE
        ///         [DCR] DOMINICAN CONTAINER RELEASE
        ///         [DDP] DELIVERY DUTY PAID
        ///         [DEM] DEMURRAGE
        ///         [DET] DETENTION
        ///         [DGC] DANGEROUS GOODS CERTIFICATE
        ///         [DGR] DANGEROUS GOODS
        ///         [DIV] DIVERSION FEE
        ///         [DK] DOCKS &amp; PIERS
        ///         [DLR] DELIVERY
        ///         [DO] DELIVERY ORDER
        ///         [DPF] DROP FEE
        ///         [DRH] DR HANDLING
        ///         [DRY] DRAYAGE
        ///         [DSB] DISBURSEMENT FEE
        ///         [DST] DESTINATION CHARGES
        ///         [DTO] DOCUMENT TURNOVER
        ///         [DTQ] DUTY - SUBJECT TO LIQUIDATION
        ///         [DTY] DUTY AND TAXES
        ///         [DVF] DECLARED VALUE FEE
        ///         [DVR] DV (CARRIER COST)
        ///         [EDF] EXPORT DECLARATION FEE
        ///         [EDH] EXPORT DECLARATION HANDLING
        ///         [EFH] ENTRY FEE &amp; HANDLING
        ///         [ERO] ERRORS &amp; OMISSIONS POLICY
        ///         [EXM] EXAMINATION COORDINATION
        ///         [FCC] FEE FOR COLLECT CHARGES
        ///         [FDA] FOOD &amp; DRUG ENTRY
        ///         [FIN] FINANCE CHARGES
        ///         [FKL] FORKLIFT FEE
        ///         [FRT] FREIGHT CHARGE
        ///         [FSC] FUEL SURCHARGE
        ///         [FWD] FORWARDING CHARGES
        ///         [GRI] GENERAL RATE INCREASE
        ///         [GST] GOODS AND SERVICES TAX
        ///         [H&amp;M] HOTELS &amp; MALLS
        ///         [HAF] HOUSE AIRFREIGHT
        ///         [HAP] HOLD AT AIRPORT
        ///         [HAZ] HAZARDOUS MATERIALS
        ///         [HD1] HANDLING CHARGES (HD1)
        ///         [HKD] HONG KONG DELIVERY ORDER
        ///         [HKE] HK EXPORT DECLARATION AND FEES
        ///         [HKG] HONG KONG GATE CHARGES
        ///         [HLS] HEAVY LIFT SURCHARGE
        ///         [HMF] HARBOR MAINTENANCE FEES
        ///         [HND] HANDLING CHARGES
        ///         [HOF] OCEAN FREIGHT
        ///         [HST] HARMONIZED SALES TAX
        ///         [IAT] IATA DISCOUNT
        ///         [IND] INSIDE DELIVERY
        ///         [INH] INSIDE CHARGE - 1 HR MIN
        ///         [INL] INLAND FRT
        ///         [INS] INSURANCE AND SERVICES
        ///         [INT] INTEREST
        ///         [IOF] OCEAN FREIGHT B/B
        ///         [IPI] IPI FEE
        ///         [IPR] IPPC PALLET REPLACEMENT
        ///         [ISC] AIRLINE SERVICE FEE
        ///         [ISF] ISF FILING FEE &amp; HANDLING
        ///         [ISP] INSPECTION SERVICES
        ///         [ITF] I.T. FEE &amp; HANDLING
        ///         [ITV] I.T. VALIDATION FEE
        ///         [LDL] LOCAL DELIVERY
        ///         [LEG] LEGALIZATION
        ///         [LF] LOCATION FEE
        ///         [LG] LIFTGATE
        ///         [LH] LINE HAUL
        ///         [LOC] LETTER OF CREDIT
        ///         [LRF] LATE RECAP FEE
        ///         [MIS] MISCELLANEOUS
        ///         [MS2] COURIER (MS2)
        ///         [MSE] MERCHANDISE PROCESSING FEE
        ///         [MSG] MESSENGER FEE
        ///         [MYF] MARSHALLING YARD FEE
        ///         [NAV] NAVCAN
        ///         [NRF] NON-RESIDENTIAL FEE
        ///         [NSF] NON-SUFFICIENT FUNDS FEES
        ///         [OBF] ORIGIN BROKER SERVICE FEE
        ///         [OHR] ON HAND REFUSED SHIPMENT CHG
        ///         [ONC] ON-CARRIAGE
        ///         [OPH] OCEAN PORT HANDLING
        ///         [OPS] OCEAN P/S
        ///         [ORG] ORIGIN FEE
        ///         [ORI] ORION FEE
        ///         [OT] OVERTIME/WEEKEND
        ///         [OTC] OVER THE COUNTER
        ///         [OTH] OTHER CHARGE
        ///         [OTL] OUTLAY FOR ADDITIONAL CHARGES
        ///         [OVR] OVERRIDE DISCOUNT
        ///         [P/S] PROFIT SPLIT
        ///         [PCS] PANAMA CANAL SURCHARGE
        ///         [PDE] PROOF OF DELIVERY (ELECTRONIC)
        ///         [PE] PERSONAL EFFECTS
        ///         [PEN] POST ENTRY SERVICES
        ///         [PFA] AIRFREIGHT LESS IATA
        ///         [PJ] PALLET JACK CHARGE
        ///         [PPF] PIER PASS FEE
        ///         [PRC] PRE-CARRIAGE
        ///         [PSF] PORT SECURITY FEE
        ///         [PSS] PEAK SEASON SURCHARGE
        ///         [PST] PROVINCIAL SALES TAX
        ///         [PUP] PICKUP
        ///         [PYP] PAYMENT PROCESSOR FEE
        ///         [QST] QUEBEC SALES TAX
        ///         [RCF] RECOVERY FEE
        ///         [REB] CUSTOMER REBATE / INCENTIVE
        ///         [RLD] RESIDENTIAL DELIVERY
        ///         [SC] STAIR CARRY
        ///         [SCW] STAIR CARRY WEIGHT RATED
        ///         [SEB] SINGLE ENTRY BOND
        ///         [SEC] SECURITY SURCHARGE
        ///         [SED] SHIPPERS EXPORT DECLARATION
        ///         [SEM] SEMINAR FEES
        ///         [SMR] SEMINAR
        ///         [SP] SHORT PAY AUTHORIZED
        ///         [SPD] SPECIAL DELIVERY
        ///         [SPH] SPECIAL HANDLING SERVICES
        ///         [SPP] SPECIAL PICKUP
        ///         [SSB] STEAMSHIP LINE BILL OF LADING
        ///         [SSP] SERVICE CENTER PERCENTAGE
        ///         [STB] SINGLE TRANSACTION BOND
        ///         [STF] CONTAINER STUFFING
        ///         [STG] STORAGE
        ///         [STP] STOP OFF
        ///         [T&amp;F] OTHER DUTY TAXES &amp; FEES
        ///         [TAR] TARIFF FILING FEES
        ///         [TF] TRANSACTION FEE
        ///         [THC] TERMINAL HANDLING
        ///         [TKP] PU AT TRK TRMNL OFF AIRPORT
        ///         [TRL] TRANSLOAD
        ///         [TRR] TRASH REMOVAL
        ///         [TST] TESTING CHARGE
        ///         [TTC] TEAM TECH COMMERCIAL
        ///         [TTD] TEAM TECH DELIVERY
        ///         [TTR] TEAM TECH RESIDENTIAL
        ///         [TYD] TEAM TECH BEYOND DELIVERY
        ///         [UNL] UNLOADING
        ///         [UPK] UNPACK
        ///         [VAC] VACIS EXAMINATION
        ///         [VAT] VAT
        ///         [WFG] WHARFAGE
        ///         [WGD] WHITE GLOVE DELIVERY
        ///         [WGT] WEIGHT BASED RATE ADJUSTMENT
        ///         [WHI] WAREHOUSE IN
        ///         [WHO] WAREHOUSE OUT
        ///         [WHS] WAREHOUSING
        ///         [WHX] WAREHOUSE TRANSFER
        ///         [WIO] WAREHOUSING, IN &amp; OUT
        ///         [WT] WAIT TIME
        ///         [WTC] WAIT TIME FOR CONTAINERS
        ///         [WTD] WAIT TIME AT DESTINATION
        ///         [WTF] WIRE TRANSFER FEE
        ///         [WTP] WAIT TIME AT ORIGIN
        ///         [WWD] WAREHOUSE WITHDRAWALS
        ///         [XDP] EXTD DIST TRUCK TERM DROP
        ///         [XDR] EXTRA DRAYAGE
        ///         [XEX] X-RAY EXAM FEE
        ///         [XFR] TRANSFER
        ///         [XRC] EXTD DIST TRUCK TERM RECOVERY
        ///         [XRT] EXTRA ROUND TRIP
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; } = "[FRT] FREIGHT CHARGE";
    
        /// <summary>Reference Number for charge</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferenceNumber { get; set; }
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = "USD";
    
        /// <summary>Comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Comment { get; set; }
    
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProjectedExpenseShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("vendorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string VendorCode { get; set; }
    
        /// <summary>
        ///         [D] Delivery,
        ///         [P] Pickup/Procurement,
        ///         [T] Transfer
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; } = "[P] Pickup/Procurement";
    
        /// <summary>
        ///         [2H] TWO MAN SVCS - 1 HR MINIMUM
        ///         [2M] TWO MAN SVC - PER 1/4 HOUR
        ///         [2MD] TWO MAN DELIVERY
        ///         [2T] TWO MAN SVCS - 2 HR MIN
        ///         [3M] THREE MAN SERVICE
        ///         [4M] FOUR MAN SERVICE
        ///         [900] DUE ACS
        ///         [925] DUE NSC POOL
        ///         [950] DUE FB
        ///         [ACC] ALAMEDA CORRIDOR CHARGE
        ///         [ADF] ADVANCED DUTY FEE
        ///         [ADM] ADMINISTRATION FEE
        ///         [ADN] AGENT DEBIT NOTE
        ///         [ADR] AIRPORT DROP OR RECOVERY
        ///         [ADU] ANTI-DUMPING FEE
        ///         [ADV] ADVANCE CHECK FEE
        ///         [AES] AES FEE
        ///         [AGI] AGRICULTURAL HOLD
        ///         [ALH] AIRLINE HANDLING
        ///         [AMC] ADDITIONAL MACHINE
        ///         [APD] APPOINTMENT DELIVERY
        ///         [APP] APPOINTMENT PICKUP
        ///         [APQ] ANIMAL PLANT QUARANTINE
        ///         [AQI] AGRICULTURAL CHARGE
        ///         [ARD] A/R RESERVE DEPOSIT
        ///         [ATD] ATTEMPTED DELIVERY
        ///         [ATP] ATTEMPTED PICKUP
        ///         [AWB] AIR WAYBILL FEE
        ///         [BAF] BUNKER ADJUSTMENT FACTOR
        ///         [BBK] BROKERAGE ON BREAKBULK
        ///         [BFI] BAF INCREASE
        ///         [BKF] BOOKING FEE
        ///         [BLP] BILL OF LADING PREPARATION
        ///         [BND] BOND CHARGES
        ///         [BOL] BILL OF LADING FEE
        ///         [BPF] BOND PREPARATION FEE
        ///         [BRK] BROKERAGE
        ///         [C&amp;A] CVD/ADD DUTY
        ///         [CBF] CUSTOMS BOND FEE
        ///         [CBP] CONTINUOUS ENTRY BOND
        ///         [CCF] CREDIT CARD FEE
        ///         [CDF] C.O.D. FEE
        ///         [CEX] CUSTOMS EXAM FEE
        ///         [CFO] COLLECT OCEAN FRT
        ///         [CFS] CFS CHARGES
        ///         [CGS] CARGO SCREENING
        ///         [CHS] CHASSIS CHARGE
        ///         [CLD] CONTAINER LOADING
        ///         [CLE] CLEARANCE AND HANDLING
        ///         [CLR] CUSTOMS CLEARANCE &amp; HANDLING
        ///         [CM] CONVENTION MATERIAL
        ///         [CNF] CONTRACTOR FEE
        ///         [COC] COORDINATION AND CONTROL
        ///         [COL] COLLECTION FEE
        ///         [COM] COMMISSION ON FREIGHT
        ///         [COR] COURIER
        ///         [CPF] CONSOL / PORT SERVICE FEE
        ///         [CPY] COPY OF DOCUMENT OR POD
        ///         [CR] CREDIT
        ///         [CRE] CRANE CHARGES
        ///         [CRN] PRESENTATION OF CARNET
        ///         [CRS] CROSS DOCK FEES
        ///         [CRT] CRATING &amp; PACKAGING
        ///         [CST] CUSTOMS TITLE SEARCH
        ///         [CTF] CLEAN TRUCK FEE
        ///         [CTG] CARTAGE
        ///         [CXB] CONTAINER BUILDUP
        ///         [DAD] DAD/DOC/WHSE
        ///         [DAP] DELIVERED AT PLACE
        ///         [DCR] DOMINICAN CONTAINER RELEASE
        ///         [DDP] DELIVERY DUTY PAID
        ///         [DEM] DEMURRAGE
        ///         [DET] DETENTION
        ///         [DGC] DANGEROUS GOODS CERTIFICATE
        ///         [DGR] DANGEROUS GOODS
        ///         [DIV] DIVERSION FEE
        ///         [DK] DOCKS &amp; PIERS
        ///         [DLR] DELIVERY
        ///         [DO] DELIVERY ORDER
        ///         [DPF] DROP FEE
        ///         [DRH] DR HANDLING
        ///         [DRY] DRAYAGE
        ///         [DSB] DISBURSEMENT FEE
        ///         [DST] DESTINATION CHARGES
        ///         [DTO] DOCUMENT TURNOVER
        ///         [DTQ] DUTY - SUBJECT TO LIQUIDATION
        ///         [DTY] DUTY AND TAXES
        ///         [DVF] DECLARED VALUE FEE
        ///         [DVR] DV (CARRIER COST)
        ///         [EDF] EXPORT DECLARATION FEE
        ///         [EDH] EXPORT DECLARATION HANDLING
        ///         [EFH] ENTRY FEE &amp; HANDLING
        ///         [ERO] ERRORS &amp; OMISSIONS POLICY
        ///         [EXM] EXAMINATION COORDINATION
        ///         [FCC] FEE FOR COLLECT CHARGES
        ///         [FDA] FOOD &amp; DRUG ENTRY
        ///         [FIN] FINANCE CHARGES
        ///         [FKL] FORKLIFT FEE
        ///         [FRT] FREIGHT CHARGE
        ///         [FSC] FUEL SURCHARGE
        ///         [FWD] FORWARDING CHARGES
        ///         [GRI] GENERAL RATE INCREASE
        ///         [GST] GOODS AND SERVICES TAX
        ///         [H&amp;M] HOTELS &amp; MALLS
        ///         [HAF] HOUSE AIRFREIGHT
        ///         [HAP] HOLD AT AIRPORT
        ///         [HAZ] HAZARDOUS MATERIALS
        ///         [HD1] HANDLING CHARGES (HD1)
        ///         [HKD] HONG KONG DELIVERY ORDER
        ///         [HKE] HK EXPORT DECLARATION AND FEES
        ///         [HKG] HONG KONG GATE CHARGES
        ///         [HLS] HEAVY LIFT SURCHARGE
        ///         [HMF] HARBOR MAINTENANCE FEES
        ///         [HND] HANDLING CHARGES
        ///         [HOF] OCEAN FREIGHT
        ///         [HST] HARMONIZED SALES TAX
        ///         [IAT] IATA DISCOUNT
        ///         [IND] INSIDE DELIVERY
        ///         [INH] INSIDE CHARGE - 1 HR MIN
        ///         [INL] INLAND FRT
        ///         [INS] INSURANCE AND SERVICES
        ///         [INT] INTEREST
        ///         [IOF] OCEAN FREIGHT B/B
        ///         [IPI] IPI FEE
        ///         [IPR] IPPC PALLET REPLACEMENT
        ///         [ISC] AIRLINE SERVICE FEE
        ///         [ISF] ISF FILING FEE &amp; HANDLING
        ///         [ISP] INSPECTION SERVICES
        ///         [ITF] I.T. FEE &amp; HANDLING
        ///         [ITV] I.T. VALIDATION FEE
        ///         [LDL] LOCAL DELIVERY
        ///         [LEG] LEGALIZATION
        ///         [LF] LOCATION FEE
        ///         [LG] LIFTGATE
        ///         [LH] LINE HAUL
        ///         [LOC] LETTER OF CREDIT
        ///         [LRF] LATE RECAP FEE
        ///         [MIS] MISCELLANEOUS
        ///         [MS2] COURIER (MS2)
        ///         [MSE] MERCHANDISE PROCESSING FEE
        ///         [MSG] MESSENGER FEE
        ///         [MYF] MARSHALLING YARD FEE
        ///         [NAV] NAVCAN
        ///         [NRF] NON-RESIDENTIAL FEE
        ///         [NSF] NON-SUFFICIENT FUNDS FEES
        ///         [OBF] ORIGIN BROKER SERVICE FEE
        ///         [OHR] ON HAND REFUSED SHIPMENT CHG
        ///         [ONC] ON-CARRIAGE
        ///         [OPH] OCEAN PORT HANDLING
        ///         [OPS] OCEAN P/S
        ///         [ORG] ORIGIN FEE
        ///         [ORI] ORION FEE
        ///         [OT] OVERTIME/WEEKEND
        ///         [OTC] OVER THE COUNTER
        ///         [OTH] OTHER CHARGE
        ///         [OTL] OUTLAY FOR ADDITIONAL CHARGES
        ///         [OVR] OVERRIDE DISCOUNT
        ///         [P/S] PROFIT SPLIT
        ///         [PCS] PANAMA CANAL SURCHARGE
        ///         [PDE] PROOF OF DELIVERY (ELECTRONIC)
        ///         [PE] PERSONAL EFFECTS
        ///         [PEN] POST ENTRY SERVICES
        ///         [PFA] AIRFREIGHT LESS IATA
        ///         [PJ] PALLET JACK CHARGE
        ///         [PPF] PIER PASS FEE
        ///         [PRC] PRE-CARRIAGE
        ///         [PSF] PORT SECURITY FEE
        ///         [PSS] PEAK SEASON SURCHARGE
        ///         [PST] PROVINCIAL SALES TAX
        ///         [PUP] PICKUP
        ///         [PYP] PAYMENT PROCESSOR FEE
        ///         [QST] QUEBEC SALES TAX
        ///         [RCF] RECOVERY FEE
        ///         [REB] CUSTOMER REBATE / INCENTIVE
        ///         [RLD] RESIDENTIAL DELIVERY
        ///         [SC] STAIR CARRY
        ///         [SCW] STAIR CARRY WEIGHT RATED
        ///         [SEB] SINGLE ENTRY BOND
        ///         [SEC] SECURITY SURCHARGE
        ///         [SED] SHIPPERS EXPORT DECLARATION
        ///         [SEM] SEMINAR FEES
        ///         [SMR] SEMINAR
        ///         [SP] SHORT PAY AUTHORIZED
        ///         [SPD] SPECIAL DELIVERY
        ///         [SPH] SPECIAL HANDLING SERVICES
        ///         [SPP] SPECIAL PICKUP
        ///         [SSB] STEAMSHIP LINE BILL OF LADING
        ///         [SSP] SERVICE CENTER PERCENTAGE
        ///         [STB] SINGLE TRANSACTION BOND
        ///         [STF] CONTAINER STUFFING
        ///         [STG] STORAGE
        ///         [STP] STOP OFF
        ///         [T&amp;F] OTHER DUTY TAXES &amp; FEES
        ///         [TAR] TARIFF FILING FEES
        ///         [TF] TRANSACTION FEE
        ///         [THC] TERMINAL HANDLING
        ///         [TKP] PU AT TRK TRMNL OFF AIRPORT
        ///         [TRL] TRANSLOAD
        ///         [TRR] TRASH REMOVAL
        ///         [TST] TESTING CHARGE
        ///         [TTC] TEAM TECH COMMERCIAL
        ///         [TTD] TEAM TECH DELIVERY
        ///         [TTR] TEAM TECH RESIDENTIAL
        ///         [TYD] TEAM TECH BEYOND DELIVERY
        ///         [UNL] UNLOADING
        ///         [UPK] UNPACK
        ///         [VAC] VACIS EXAMINATION
        ///         [VAT] VAT
        ///         [WFG] WHARFAGE
        ///         [WGD] WHITE GLOVE DELIVERY
        ///         [WGT] WEIGHT BASED RATE ADJUSTMENT
        ///         [WHI] WAREHOUSE IN
        ///         [WHO] WAREHOUSE OUT
        ///         [WHS] WAREHOUSING
        ///         [WHX] WAREHOUSE TRANSFER
        ///         [WIO] WAREHOUSING, IN &amp; OUT
        ///         [WT] WAIT TIME
        ///         [WTC] WAIT TIME FOR CONTAINERS
        ///         [WTD] WAIT TIME AT DESTINATION
        ///         [WTF] WIRE TRANSFER FEE
        ///         [WTP] WAIT TIME AT ORIGIN
        ///         [WWD] WAREHOUSE WITHDRAWALS
        ///         [XDP] EXTD DIST TRUCK TERM DROP
        ///         [XDR] EXTRA DRAYAGE
        ///         [XEX] X-RAY EXAM FEE
        ///         [XFR] TRANSFER
        ///         [XRC] EXTD DIST TRUCK TERM RECOVERY
        ///         [XRT] EXTRA ROUND TRIP
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; } = "[FRT] FREIGHT CHARGE";
    
        /// <summary>Reference Number for charge</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferenceNumber { get; set; }
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = "USD";
    
        /// <summary>Comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Comment { get; set; }
    
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate5 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string VendorCode { get; set; }
    
        /// <summary>
        ///         [D] Delivery,
        ///         [P] Pickup/Procurement,
        ///         [T] Transfer
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JsonldShipmentBookingCreate5_Type { get; set; } = "[P] Pickup/Procurement";
    
        /// <summary>
        ///         [2H] TWO MAN SVCS - 1 HR MINIMUM
        ///         [2M] TWO MAN SVC - PER 1/4 HOUR
        ///         [2MD] TWO MAN DELIVERY
        ///         [2T] TWO MAN SVCS - 2 HR MIN
        ///         [3M] THREE MAN SERVICE
        ///         [4M] FOUR MAN SERVICE
        ///         [900] DUE ACS
        ///         [925] DUE NSC POOL
        ///         [950] DUE FB
        ///         [ACC] ALAMEDA CORRIDOR CHARGE
        ///         [ADF] ADVANCED DUTY FEE
        ///         [ADM] ADMINISTRATION FEE
        ///         [ADN] AGENT DEBIT NOTE
        ///         [ADR] AIRPORT DROP OR RECOVERY
        ///         [ADU] ANTI-DUMPING FEE
        ///         [ADV] ADVANCE CHECK FEE
        ///         [AES] AES FEE
        ///         [AGI] AGRICULTURAL HOLD
        ///         [ALH] AIRLINE HANDLING
        ///         [AMC] ADDITIONAL MACHINE
        ///         [APD] APPOINTMENT DELIVERY
        ///         [APP] APPOINTMENT PICKUP
        ///         [APQ] ANIMAL PLANT QUARANTINE
        ///         [AQI] AGRICULTURAL CHARGE
        ///         [ARD] A/R RESERVE DEPOSIT
        ///         [ATD] ATTEMPTED DELIVERY
        ///         [ATP] ATTEMPTED PICKUP
        ///         [AWB] AIR WAYBILL FEE
        ///         [BAF] BUNKER ADJUSTMENT FACTOR
        ///         [BBK] BROKERAGE ON BREAKBULK
        ///         [BFI] BAF INCREASE
        ///         [BKF] BOOKING FEE
        ///         [BLP] BILL OF LADING PREPARATION
        ///         [BND] BOND CHARGES
        ///         [BOL] BILL OF LADING FEE
        ///         [BPF] BOND PREPARATION FEE
        ///         [BRK] BROKERAGE
        ///         [C&amp;A] CVD/ADD DUTY
        ///         [CBF] CUSTOMS BOND FEE
        ///         [CBP] CONTINUOUS ENTRY BOND
        ///         [CCF] CREDIT CARD FEE
        ///         [CDF] C.O.D. FEE
        ///         [CEX] CUSTOMS EXAM FEE
        ///         [CFO] COLLECT OCEAN FRT
        ///         [CFS] CFS CHARGES
        ///         [CGS] CARGO SCREENING
        ///         [CHS] CHASSIS CHARGE
        ///         [CLD] CONTAINER LOADING
        ///         [CLE] CLEARANCE AND HANDLING
        ///         [CLR] CUSTOMS CLEARANCE &amp; HANDLING
        ///         [CM] CONVENTION MATERIAL
        ///         [CNF] CONTRACTOR FEE
        ///         [COC] COORDINATION AND CONTROL
        ///         [COL] COLLECTION FEE
        ///         [COM] COMMISSION ON FREIGHT
        ///         [COR] COURIER
        ///         [CPF] CONSOL / PORT SERVICE FEE
        ///         [CPY] COPY OF DOCUMENT OR POD
        ///         [CR] CREDIT
        ///         [CRE] CRANE CHARGES
        ///         [CRN] PRESENTATION OF CARNET
        ///         [CRS] CROSS DOCK FEES
        ///         [CRT] CRATING &amp; PACKAGING
        ///         [CST] CUSTOMS TITLE SEARCH
        ///         [CTF] CLEAN TRUCK FEE
        ///         [CTG] CARTAGE
        ///         [CXB] CONTAINER BUILDUP
        ///         [DAD] DAD/DOC/WHSE
        ///         [DAP] DELIVERED AT PLACE
        ///         [DCR] DOMINICAN CONTAINER RELEASE
        ///         [DDP] DELIVERY DUTY PAID
        ///         [DEM] DEMURRAGE
        ///         [DET] DETENTION
        ///         [DGC] DANGEROUS GOODS CERTIFICATE
        ///         [DGR] DANGEROUS GOODS
        ///         [DIV] DIVERSION FEE
        ///         [DK] DOCKS &amp; PIERS
        ///         [DLR] DELIVERY
        ///         [DO] DELIVERY ORDER
        ///         [DPF] DROP FEE
        ///         [DRH] DR HANDLING
        ///         [DRY] DRAYAGE
        ///         [DSB] DISBURSEMENT FEE
        ///         [DST] DESTINATION CHARGES
        ///         [DTO] DOCUMENT TURNOVER
        ///         [DTQ] DUTY - SUBJECT TO LIQUIDATION
        ///         [DTY] DUTY AND TAXES
        ///         [DVF] DECLARED VALUE FEE
        ///         [DVR] DV (CARRIER COST)
        ///         [EDF] EXPORT DECLARATION FEE
        ///         [EDH] EXPORT DECLARATION HANDLING
        ///         [EFH] ENTRY FEE &amp; HANDLING
        ///         [ERO] ERRORS &amp; OMISSIONS POLICY
        ///         [EXM] EXAMINATION COORDINATION
        ///         [FCC] FEE FOR COLLECT CHARGES
        ///         [FDA] FOOD &amp; DRUG ENTRY
        ///         [FIN] FINANCE CHARGES
        ///         [FKL] FORKLIFT FEE
        ///         [FRT] FREIGHT CHARGE
        ///         [FSC] FUEL SURCHARGE
        ///         [FWD] FORWARDING CHARGES
        ///         [GRI] GENERAL RATE INCREASE
        ///         [GST] GOODS AND SERVICES TAX
        ///         [H&amp;M] HOTELS &amp; MALLS
        ///         [HAF] HOUSE AIRFREIGHT
        ///         [HAP] HOLD AT AIRPORT
        ///         [HAZ] HAZARDOUS MATERIALS
        ///         [HD1] HANDLING CHARGES (HD1)
        ///         [HKD] HONG KONG DELIVERY ORDER
        ///         [HKE] HK EXPORT DECLARATION AND FEES
        ///         [HKG] HONG KONG GATE CHARGES
        ///         [HLS] HEAVY LIFT SURCHARGE
        ///         [HMF] HARBOR MAINTENANCE FEES
        ///         [HND] HANDLING CHARGES
        ///         [HOF] OCEAN FREIGHT
        ///         [HST] HARMONIZED SALES TAX
        ///         [IAT] IATA DISCOUNT
        ///         [IND] INSIDE DELIVERY
        ///         [INH] INSIDE CHARGE - 1 HR MIN
        ///         [INL] INLAND FRT
        ///         [INS] INSURANCE AND SERVICES
        ///         [INT] INTEREST
        ///         [IOF] OCEAN FREIGHT B/B
        ///         [IPI] IPI FEE
        ///         [IPR] IPPC PALLET REPLACEMENT
        ///         [ISC] AIRLINE SERVICE FEE
        ///         [ISF] ISF FILING FEE &amp; HANDLING
        ///         [ISP] INSPECTION SERVICES
        ///         [ITF] I.T. FEE &amp; HANDLING
        ///         [ITV] I.T. VALIDATION FEE
        ///         [LDL] LOCAL DELIVERY
        ///         [LEG] LEGALIZATION
        ///         [LF] LOCATION FEE
        ///         [LG] LIFTGATE
        ///         [LH] LINE HAUL
        ///         [LOC] LETTER OF CREDIT
        ///         [LRF] LATE RECAP FEE
        ///         [MIS] MISCELLANEOUS
        ///         [MS2] COURIER (MS2)
        ///         [MSE] MERCHANDISE PROCESSING FEE
        ///         [MSG] MESSENGER FEE
        ///         [MYF] MARSHALLING YARD FEE
        ///         [NAV] NAVCAN
        ///         [NRF] NON-RESIDENTIAL FEE
        ///         [NSF] NON-SUFFICIENT FUNDS FEES
        ///         [OBF] ORIGIN BROKER SERVICE FEE
        ///         [OHR] ON HAND REFUSED SHIPMENT CHG
        ///         [ONC] ON-CARRIAGE
        ///         [OPH] OCEAN PORT HANDLING
        ///         [OPS] OCEAN P/S
        ///         [ORG] ORIGIN FEE
        ///         [ORI] ORION FEE
        ///         [OT] OVERTIME/WEEKEND
        ///         [OTC] OVER THE COUNTER
        ///         [OTH] OTHER CHARGE
        ///         [OTL] OUTLAY FOR ADDITIONAL CHARGES
        ///         [OVR] OVERRIDE DISCOUNT
        ///         [P/S] PROFIT SPLIT
        ///         [PCS] PANAMA CANAL SURCHARGE
        ///         [PDE] PROOF OF DELIVERY (ELECTRONIC)
        ///         [PE] PERSONAL EFFECTS
        ///         [PEN] POST ENTRY SERVICES
        ///         [PFA] AIRFREIGHT LESS IATA
        ///         [PJ] PALLET JACK CHARGE
        ///         [PPF] PIER PASS FEE
        ///         [PRC] PRE-CARRIAGE
        ///         [PSF] PORT SECURITY FEE
        ///         [PSS] PEAK SEASON SURCHARGE
        ///         [PST] PROVINCIAL SALES TAX
        ///         [PUP] PICKUP
        ///         [PYP] PAYMENT PROCESSOR FEE
        ///         [QST] QUEBEC SALES TAX
        ///         [RCF] RECOVERY FEE
        ///         [REB] CUSTOMER REBATE / INCENTIVE
        ///         [RLD] RESIDENTIAL DELIVERY
        ///         [SC] STAIR CARRY
        ///         [SCW] STAIR CARRY WEIGHT RATED
        ///         [SEB] SINGLE ENTRY BOND
        ///         [SEC] SECURITY SURCHARGE
        ///         [SED] SHIPPERS EXPORT DECLARATION
        ///         [SEM] SEMINAR FEES
        ///         [SMR] SEMINAR
        ///         [SP] SHORT PAY AUTHORIZED
        ///         [SPD] SPECIAL DELIVERY
        ///         [SPH] SPECIAL HANDLING SERVICES
        ///         [SPP] SPECIAL PICKUP
        ///         [SSB] STEAMSHIP LINE BILL OF LADING
        ///         [SSP] SERVICE CENTER PERCENTAGE
        ///         [STB] SINGLE TRANSACTION BOND
        ///         [STF] CONTAINER STUFFING
        ///         [STG] STORAGE
        ///         [STP] STOP OFF
        ///         [T&amp;F] OTHER DUTY TAXES &amp; FEES
        ///         [TAR] TARIFF FILING FEES
        ///         [TF] TRANSACTION FEE
        ///         [THC] TERMINAL HANDLING
        ///         [TKP] PU AT TRK TRMNL OFF AIRPORT
        ///         [TRL] TRANSLOAD
        ///         [TRR] TRASH REMOVAL
        ///         [TST] TESTING CHARGE
        ///         [TTC] TEAM TECH COMMERCIAL
        ///         [TTD] TEAM TECH DELIVERY
        ///         [TTR] TEAM TECH RESIDENTIAL
        ///         [TYD] TEAM TECH BEYOND DELIVERY
        ///         [UNL] UNLOADING
        ///         [UPK] UNPACK
        ///         [VAC] VACIS EXAMINATION
        ///         [VAT] VAT
        ///         [WFG] WHARFAGE
        ///         [WGD] WHITE GLOVE DELIVERY
        ///         [WGT] WEIGHT BASED RATE ADJUSTMENT
        ///         [WHI] WAREHOUSE IN
        ///         [WHO] WAREHOUSE OUT
        ///         [WHS] WAREHOUSING
        ///         [WHX] WAREHOUSE TRANSFER
        ///         [WIO] WAREHOUSING, IN &amp; OUT
        ///         [WT] WAIT TIME
        ///         [WTC] WAIT TIME FOR CONTAINERS
        ///         [WTD] WAIT TIME AT DESTINATION
        ///         [WTF] WIRE TRANSFER FEE
        ///         [WTP] WAIT TIME AT ORIGIN
        ///         [WWD] WAREHOUSE WITHDRAWALS
        ///         [XDP] EXTD DIST TRUCK TERM DROP
        ///         [XDR] EXTRA DRAYAGE
        ///         [XEX] X-RAY EXAM FEE
        ///         [XFR] TRANSFER
        ///         [XRC] EXTD DIST TRUCK TERM RECOVERY
        ///         [XRT] EXTRA ROUND TRIP
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; } = "[FRT] FREIGHT CHARGE";
    
        /// <summary>Reference Number for charge</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferenceNumber { get; set; }
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = "USD";
    
        /// <summary>Comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Comment { get; set; }
    
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate5 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string VendorCode { get; set; }
    
        /// <summary>
        ///         [D] Delivery,
        ///         [P] Pickup/Procurement,
        ///         [T] Transfer
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JsonldShipmentCreate5_Type { get; set; } = "[P] Pickup/Procurement";
    
        /// <summary>
        ///         [2H] TWO MAN SVCS - 1 HR MINIMUM
        ///         [2M] TWO MAN SVC - PER 1/4 HOUR
        ///         [2MD] TWO MAN DELIVERY
        ///         [2T] TWO MAN SVCS - 2 HR MIN
        ///         [3M] THREE MAN SERVICE
        ///         [4M] FOUR MAN SERVICE
        ///         [900] DUE ACS
        ///         [925] DUE NSC POOL
        ///         [950] DUE FB
        ///         [ACC] ALAMEDA CORRIDOR CHARGE
        ///         [ADF] ADVANCED DUTY FEE
        ///         [ADM] ADMINISTRATION FEE
        ///         [ADN] AGENT DEBIT NOTE
        ///         [ADR] AIRPORT DROP OR RECOVERY
        ///         [ADU] ANTI-DUMPING FEE
        ///         [ADV] ADVANCE CHECK FEE
        ///         [AES] AES FEE
        ///         [AGI] AGRICULTURAL HOLD
        ///         [ALH] AIRLINE HANDLING
        ///         [AMC] ADDITIONAL MACHINE
        ///         [APD] APPOINTMENT DELIVERY
        ///         [APP] APPOINTMENT PICKUP
        ///         [APQ] ANIMAL PLANT QUARANTINE
        ///         [AQI] AGRICULTURAL CHARGE
        ///         [ARD] A/R RESERVE DEPOSIT
        ///         [ATD] ATTEMPTED DELIVERY
        ///         [ATP] ATTEMPTED PICKUP
        ///         [AWB] AIR WAYBILL FEE
        ///         [BAF] BUNKER ADJUSTMENT FACTOR
        ///         [BBK] BROKERAGE ON BREAKBULK
        ///         [BFI] BAF INCREASE
        ///         [BKF] BOOKING FEE
        ///         [BLP] BILL OF LADING PREPARATION
        ///         [BND] BOND CHARGES
        ///         [BOL] BILL OF LADING FEE
        ///         [BPF] BOND PREPARATION FEE
        ///         [BRK] BROKERAGE
        ///         [C&amp;A] CVD/ADD DUTY
        ///         [CBF] CUSTOMS BOND FEE
        ///         [CBP] CONTINUOUS ENTRY BOND
        ///         [CCF] CREDIT CARD FEE
        ///         [CDF] C.O.D. FEE
        ///         [CEX] CUSTOMS EXAM FEE
        ///         [CFO] COLLECT OCEAN FRT
        ///         [CFS] CFS CHARGES
        ///         [CGS] CARGO SCREENING
        ///         [CHS] CHASSIS CHARGE
        ///         [CLD] CONTAINER LOADING
        ///         [CLE] CLEARANCE AND HANDLING
        ///         [CLR] CUSTOMS CLEARANCE &amp; HANDLING
        ///         [CM] CONVENTION MATERIAL
        ///         [CNF] CONTRACTOR FEE
        ///         [COC] COORDINATION AND CONTROL
        ///         [COL] COLLECTION FEE
        ///         [COM] COMMISSION ON FREIGHT
        ///         [COR] COURIER
        ///         [CPF] CONSOL / PORT SERVICE FEE
        ///         [CPY] COPY OF DOCUMENT OR POD
        ///         [CR] CREDIT
        ///         [CRE] CRANE CHARGES
        ///         [CRN] PRESENTATION OF CARNET
        ///         [CRS] CROSS DOCK FEES
        ///         [CRT] CRATING &amp; PACKAGING
        ///         [CST] CUSTOMS TITLE SEARCH
        ///         [CTF] CLEAN TRUCK FEE
        ///         [CTG] CARTAGE
        ///         [CXB] CONTAINER BUILDUP
        ///         [DAD] DAD/DOC/WHSE
        ///         [DAP] DELIVERED AT PLACE
        ///         [DCR] DOMINICAN CONTAINER RELEASE
        ///         [DDP] DELIVERY DUTY PAID
        ///         [DEM] DEMURRAGE
        ///         [DET] DETENTION
        ///         [DGC] DANGEROUS GOODS CERTIFICATE
        ///         [DGR] DANGEROUS GOODS
        ///         [DIV] DIVERSION FEE
        ///         [DK] DOCKS &amp; PIERS
        ///         [DLR] DELIVERY
        ///         [DO] DELIVERY ORDER
        ///         [DPF] DROP FEE
        ///         [DRH] DR HANDLING
        ///         [DRY] DRAYAGE
        ///         [DSB] DISBURSEMENT FEE
        ///         [DST] DESTINATION CHARGES
        ///         [DTO] DOCUMENT TURNOVER
        ///         [DTQ] DUTY - SUBJECT TO LIQUIDATION
        ///         [DTY] DUTY AND TAXES
        ///         [DVF] DECLARED VALUE FEE
        ///         [DVR] DV (CARRIER COST)
        ///         [EDF] EXPORT DECLARATION FEE
        ///         [EDH] EXPORT DECLARATION HANDLING
        ///         [EFH] ENTRY FEE &amp; HANDLING
        ///         [ERO] ERRORS &amp; OMISSIONS POLICY
        ///         [EXM] EXAMINATION COORDINATION
        ///         [FCC] FEE FOR COLLECT CHARGES
        ///         [FDA] FOOD &amp; DRUG ENTRY
        ///         [FIN] FINANCE CHARGES
        ///         [FKL] FORKLIFT FEE
        ///         [FRT] FREIGHT CHARGE
        ///         [FSC] FUEL SURCHARGE
        ///         [FWD] FORWARDING CHARGES
        ///         [GRI] GENERAL RATE INCREASE
        ///         [GST] GOODS AND SERVICES TAX
        ///         [H&amp;M] HOTELS &amp; MALLS
        ///         [HAF] HOUSE AIRFREIGHT
        ///         [HAP] HOLD AT AIRPORT
        ///         [HAZ] HAZARDOUS MATERIALS
        ///         [HD1] HANDLING CHARGES (HD1)
        ///         [HKD] HONG KONG DELIVERY ORDER
        ///         [HKE] HK EXPORT DECLARATION AND FEES
        ///         [HKG] HONG KONG GATE CHARGES
        ///         [HLS] HEAVY LIFT SURCHARGE
        ///         [HMF] HARBOR MAINTENANCE FEES
        ///         [HND] HANDLING CHARGES
        ///         [HOF] OCEAN FREIGHT
        ///         [HST] HARMONIZED SALES TAX
        ///         [IAT] IATA DISCOUNT
        ///         [IND] INSIDE DELIVERY
        ///         [INH] INSIDE CHARGE - 1 HR MIN
        ///         [INL] INLAND FRT
        ///         [INS] INSURANCE AND SERVICES
        ///         [INT] INTEREST
        ///         [IOF] OCEAN FREIGHT B/B
        ///         [IPI] IPI FEE
        ///         [IPR] IPPC PALLET REPLACEMENT
        ///         [ISC] AIRLINE SERVICE FEE
        ///         [ISF] ISF FILING FEE &amp; HANDLING
        ///         [ISP] INSPECTION SERVICES
        ///         [ITF] I.T. FEE &amp; HANDLING
        ///         [ITV] I.T. VALIDATION FEE
        ///         [LDL] LOCAL DELIVERY
        ///         [LEG] LEGALIZATION
        ///         [LF] LOCATION FEE
        ///         [LG] LIFTGATE
        ///         [LH] LINE HAUL
        ///         [LOC] LETTER OF CREDIT
        ///         [LRF] LATE RECAP FEE
        ///         [MIS] MISCELLANEOUS
        ///         [MS2] COURIER (MS2)
        ///         [MSE] MERCHANDISE PROCESSING FEE
        ///         [MSG] MESSENGER FEE
        ///         [MYF] MARSHALLING YARD FEE
        ///         [NAV] NAVCAN
        ///         [NRF] NON-RESIDENTIAL FEE
        ///         [NSF] NON-SUFFICIENT FUNDS FEES
        ///         [OBF] ORIGIN BROKER SERVICE FEE
        ///         [OHR] ON HAND REFUSED SHIPMENT CHG
        ///         [ONC] ON-CARRIAGE
        ///         [OPH] OCEAN PORT HANDLING
        ///         [OPS] OCEAN P/S
        ///         [ORG] ORIGIN FEE
        ///         [ORI] ORION FEE
        ///         [OT] OVERTIME/WEEKEND
        ///         [OTC] OVER THE COUNTER
        ///         [OTH] OTHER CHARGE
        ///         [OTL] OUTLAY FOR ADDITIONAL CHARGES
        ///         [OVR] OVERRIDE DISCOUNT
        ///         [P/S] PROFIT SPLIT
        ///         [PCS] PANAMA CANAL SURCHARGE
        ///         [PDE] PROOF OF DELIVERY (ELECTRONIC)
        ///         [PE] PERSONAL EFFECTS
        ///         [PEN] POST ENTRY SERVICES
        ///         [PFA] AIRFREIGHT LESS IATA
        ///         [PJ] PALLET JACK CHARGE
        ///         [PPF] PIER PASS FEE
        ///         [PRC] PRE-CARRIAGE
        ///         [PSF] PORT SECURITY FEE
        ///         [PSS] PEAK SEASON SURCHARGE
        ///         [PST] PROVINCIAL SALES TAX
        ///         [PUP] PICKUP
        ///         [PYP] PAYMENT PROCESSOR FEE
        ///         [QST] QUEBEC SALES TAX
        ///         [RCF] RECOVERY FEE
        ///         [REB] CUSTOMER REBATE / INCENTIVE
        ///         [RLD] RESIDENTIAL DELIVERY
        ///         [SC] STAIR CARRY
        ///         [SCW] STAIR CARRY WEIGHT RATED
        ///         [SEB] SINGLE ENTRY BOND
        ///         [SEC] SECURITY SURCHARGE
        ///         [SED] SHIPPERS EXPORT DECLARATION
        ///         [SEM] SEMINAR FEES
        ///         [SMR] SEMINAR
        ///         [SP] SHORT PAY AUTHORIZED
        ///         [SPD] SPECIAL DELIVERY
        ///         [SPH] SPECIAL HANDLING SERVICES
        ///         [SPP] SPECIAL PICKUP
        ///         [SSB] STEAMSHIP LINE BILL OF LADING
        ///         [SSP] SERVICE CENTER PERCENTAGE
        ///         [STB] SINGLE TRANSACTION BOND
        ///         [STF] CONTAINER STUFFING
        ///         [STG] STORAGE
        ///         [STP] STOP OFF
        ///         [T&amp;F] OTHER DUTY TAXES &amp; FEES
        ///         [TAR] TARIFF FILING FEES
        ///         [TF] TRANSACTION FEE
        ///         [THC] TERMINAL HANDLING
        ///         [TKP] PU AT TRK TRMNL OFF AIRPORT
        ///         [TRL] TRANSLOAD
        ///         [TRR] TRASH REMOVAL
        ///         [TST] TESTING CHARGE
        ///         [TTC] TEAM TECH COMMERCIAL
        ///         [TTD] TEAM TECH DELIVERY
        ///         [TTR] TEAM TECH RESIDENTIAL
        ///         [TYD] TEAM TECH BEYOND DELIVERY
        ///         [UNL] UNLOADING
        ///         [UPK] UNPACK
        ///         [VAC] VACIS EXAMINATION
        ///         [VAT] VAT
        ///         [WFG] WHARFAGE
        ///         [WGD] WHITE GLOVE DELIVERY
        ///         [WGT] WEIGHT BASED RATE ADJUSTMENT
        ///         [WHI] WAREHOUSE IN
        ///         [WHO] WAREHOUSE OUT
        ///         [WHS] WAREHOUSING
        ///         [WHX] WAREHOUSE TRANSFER
        ///         [WIO] WAREHOUSING, IN &amp; OUT
        ///         [WT] WAIT TIME
        ///         [WTC] WAIT TIME FOR CONTAINERS
        ///         [WTD] WAIT TIME AT DESTINATION
        ///         [WTF] WIRE TRANSFER FEE
        ///         [WTP] WAIT TIME AT ORIGIN
        ///         [WWD] WAREHOUSE WITHDRAWALS
        ///         [XDP] EXTD DIST TRUCK TERM DROP
        ///         [XDR] EXTRA DRAYAGE
        ///         [XEX] X-RAY EXAM FEE
        ///         [XFR] TRANSFER
        ///         [XRC] EXTD DIST TRUCK TERM RECOVERY
        ///         [XRT] EXTRA ROUND TRIP
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("chargeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChargeCode { get; set; } = "[FRT] FREIGHT CHARGE";
    
        /// <summary>Reference Number for charge</summary>
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ReferenceNumber { get; set; }
    
        /// <summary>Currency</summary>
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Currency { get; set; } = "USD";
    
        /// <summary>Comment</summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Comment { get; set; }
    
        /// <summary>Amount</summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read19 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Total { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read20 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Total { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read21 
    {
        [Newtonsoft.Json.JsonProperty("rateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transitDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TransitDays { get; set; }
    
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateRemarks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RateRemarks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateBreakDownList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read19> RateBreakDownList { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read22 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceLevel { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Total { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RateType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transitDays", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TransitDays { get; set; }
    
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateRemarks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RateRemarks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rateBreakDownList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read20> RateBreakDownList { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read23 
    {
        [Newtonsoft.Json.JsonProperty("vendor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vendor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Response { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read24 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vendor { get; set; }
    
        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Response { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestedDeliveryShipmentBookingCreate 
    {
        /// <summary>
        ///         [R] Regular Delivery,
        ///         [M] Must Delivery,
        ///         [S] Special Delivery,
        ///         [D] Direct to Consignee,
        ///         [H] Hold on Dock
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>Delivery date YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        /// <summary>
        ///         [O] On, 
        ///         [B] By
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("onBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OnBy { get; set; } = "[B] By";
    
        /// <summary>Requested pickup related notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Notes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestedDeliveryShipmentCreate 
    {
        /// <summary>
        ///         [R] Regular Delivery,
        ///         [M] Must Delivery,
        ///         [S] Special Delivery,
        ///         [D] Direct to Consignee,
        ///         [H] Hold on Dock
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>Delivery date YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        /// <summary>
        ///         [O] On, 
        ///         [B] By
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("onBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OnBy { get; set; } = "[B] By";
    
        /// <summary>Requested pickup related notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Notes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate6 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [R] Regular Delivery,
        ///         [M] Must Delivery,
        ///         [S] Special Delivery,
        ///         [D] Direct to Consignee,
        ///         [H] Hold on Dock
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JsonldShipmentBookingCreate6_Type { get; set; }
    
        /// <summary>Delivery date YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        /// <summary>
        ///         [O] On, 
        ///         [B] By
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("onBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OnBy { get; set; } = "[B] By";
    
        /// <summary>Requested pickup related notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Notes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate6 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [R] Regular Delivery,
        ///         [M] Must Delivery,
        ///         [S] Special Delivery,
        ///         [D] Direct to Consignee,
        ///         [H] Hold on Dock
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JsonldShipmentCreate6_Type { get; set; }
    
        /// <summary>Delivery date YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        /// <summary>
        ///         [O] On, 
        ///         [B] By
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("onBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OnBy { get; set; } = "[B] By";
    
        /// <summary>Requested pickup related notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Notes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestedPickupShipmentBookingCreate 
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>
        ///             [R] Regular,
        ///             [S] Special,
        ///             [F] Customer Drop-Off,
        ///             [N] No Action
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; } = "[R] Regular";
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        /// <summary>
        ///         [O] On, 
        ///         [B] By
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("onBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OnBy { get; set; } = "[B] By";
    
        /// <summary>Requested pickup related notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Notes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RequestedPickupShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>
        ///             [R] Regular,
        ///             [S] Special,
        ///             [F] Customer Drop-Off,
        ///             [N] No Action
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; } = "[R] Regular";
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        /// <summary>
        ///         [O] On, 
        ///         [B] By
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("onBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OnBy { get; set; } = "[B] By";
    
        /// <summary>Requested pickup related notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Notes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate7 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>
        ///             [R] Regular,
        ///             [S] Special,
        ///             [F] Customer Drop-Off,
        ///             [N] No Action
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JsonldShipmentBookingCreate7_Type { get; set; } = "[R] Regular";
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        /// <summary>
        ///         [O] On, 
        ///         [B] By
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("onBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OnBy { get; set; } = "[B] By";
    
        /// <summary>Requested pickup related notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Notes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate7 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>
        ///             [R] Regular,
        ///             [S] Special,
        ///             [F] Customer Drop-Off,
        ///             [N] No Action
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JsonldShipmentCreate7_Type { get; set; } = "[R] Regular";
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("fromTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset FromTime { get; set; }
    
        /// <summary>Time between</summary>
        [Newtonsoft.Json.JsonProperty("toTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ToTime { get; set; }
    
        /// <summary>
        ///         [O] On, 
        ///         [B] By
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("onBy", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OnBy { get; set; } = "[B] By";
    
        /// <summary>Requested pickup related notes</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Notes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentShipmentBookingCreate 
    {
        /// <summary>Set true if this is a live shipment</summary>
        [Newtonsoft.Json.JsonProperty("isTestShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsTestShipment { get; set; }
    
        /// <summary>If your account is enabled to pre-reserve the house bill, 
        ///             you must reserve a house bill from the /api/teamww/get-house-bill endpoint.  Leave this property blank and a house bill,
        ///             will be generated for you.</summary>
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HouseBill { get; set; }
    
        /// <summary>Control branch.  Can be null.</summary>
        [Newtonsoft.Json.JsonProperty("controlBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ControlBranch { get; set; }
    
        /// <summary> 
        ///             [01] TAE, 
        ///             [02] TOS, 
        ///             [03] TCB, 
        ///             [05] TWC, 
        ///             [21] LIB, 
        ///             [25] PWJ, 
        ///             [27] RAV
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = "[01] TAE";
    
        /// <summary>
        ///             [1] Domestic Air,
        ///             [2] International Air Export,
        ///             [3] International Air Import,
        ///             [4] Ocean Export (FMC),
        ///             [5] Ocean Export (NVOCC),
        ///             [6] Ocean Import (FMC),
        ///             [7] Ocean Import (NVOCC),
        ///             [8] Domestic Truck,
        ///             [19] Domestic Warehouse,
        ///             [20] Ocean Warehouse,
        ///             [21] International Warehouse,
        ///             [22] Intl Customs Brokerage,
        ///             [23] Ocean Customs Brokerage,
        ///             [24] Ocean Import (Unregulated),
        ///             [25] Ocean Export (Unregulated),
        ///             [26] International Truck Import,
        ///             [27] International Truck Export,
        ///             [30] International Truck,
        ///             [31] International Air,
        ///             [32] Ocean Unregulated
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("shipmentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentType { get; set; } = "[8] Domestic Truck";
    
        /// <summary>
        ///         [D] Same Day,
        ///         [N] Over The Counter,
        ///         [A] Overnight AM,
        ///         [P] Overnight PM,
        ///         [R] International Express,
        ///         [T] International Standard,
        ///         [M] International Economy,
        ///         [O] Other,
        ///         [Q] Charter,
        ///         [S] Standard,
        ///         [2] Standard 2 (2-day),
        ///         [3] Economy (3-day),
        ///         [5] Deferred (4-5 day),
        ///         [L] LTL,
        ///         [F] FTL,
        ///         [U] EUV/Hotshot</summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Service { get; set; } = "[3] Economy (3-day)";
    
        /// <summary>Pickup date YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        /// <summary>Origin location. Must be a valid Team Worldwide origin.</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string Origin { get; set; }
    
        /// <summary>Destination location.  Must be a valid Team Worldwide destination</summary>
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string Destination { get; set; }
    
        /// <summary>Acceptable values are IN and CM</summary>
        [Newtonsoft.Json.JsonProperty("linearUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LinearUnits { get; set; } = "IN";
    
        /// <summary>Acceptable values are LB and KG</summary>
        [Newtonsoft.Json.JsonProperty("weightUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeightUnits { get; set; } = "LB";
    
        /// <summary>Is the shipment oversize?</summary>
        [Newtonsoft.Json.JsonProperty("oversize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Oversize { get; set; } = "N";
    
        /// <summary>Description of the goods</summary>
        [Newtonsoft.Json.JsonProperty("goodsDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string GoodsDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    
        /// <summary>Special instructions</summary>
        [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(240)]
        public string SpecialInstructions { get; set; }
    
        /// <summary>Declared value</summary>
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeclaredValue { get; set; }
    
        /// <summary>The shipper of the shipment</summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipperShipmentBookingCreate Shipper { get; set; } = new ShipperShipmentBookingCreate();
    
        /// <summary>The consignee of this shipment</summary>
        [Newtonsoft.Json.JsonProperty("consignee", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ConsigneeShipmentBookingCreate Consignee { get; set; } = new ConsigneeShipmentBookingCreate();
    
        /// <summary>Billing party of this shipment</summary>
        [Newtonsoft.Json.JsonProperty("billTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillToShipmentBookingCreate BillTo { get; set; }
    
        /// <summary>Requested pickup</summary>
        [Newtonsoft.Json.JsonProperty("requestedPickup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedPickupShipmentBookingCreate RequestedPickup { get; set; }
    
        /// <summary>Request delivery</summary>
        [Newtonsoft.Json.JsonProperty("requestedDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedDeliveryShipmentBookingCreate RequestedDelivery { get; set; }
    
        /// <summary>Shipment goods</summary>
        [Newtonsoft.Json.JsonProperty("shipmentGoods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentGoodsShipmentBookingCreate> ShipmentGoods { get; set; }
    
        /// <summary>Shipment goods handling</summary>
        [Newtonsoft.Json.JsonProperty("shipmentGoodsHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentGoodsHandlingShipmentBookingCreate> ShipmentGoodsHandling { get; set; }
    
        /// <summary>Shipment notes</summary>
        [Newtonsoft.Json.JsonProperty("shipmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentNoteResourceShipmentBookingCreate> ShipmentNotes { get; set; }
    
        /// <summary>Any additional references for this shipment</summary>
        [Newtonsoft.Json.JsonProperty("additionalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentAdditionalReferencesShipmentBookingCreate> AdditionalReferences { get; set; }
    
        /// <summary>Projected Expenses</summary>
        [Newtonsoft.Json.JsonProperty("projectedExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectedExpenseShipmentBookingCreate> ProjectedExpenses { get; set; }
    
        /// <summary>Projected customer charges</summary>
        [Newtonsoft.Json.JsonProperty("projectedCustomerCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectedCustomerChargeShipmentBookingCreate> ProjectedCustomerCharges { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate8 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Set true if this is a live shipment</summary>
        [Newtonsoft.Json.JsonProperty("isTestShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsTestShipment { get; set; }
    
        /// <summary>If your account is enabled to pre-reserve the house bill, 
        ///             you must reserve a house bill from the /api/teamww/get-house-bill endpoint.  Leave this property blank and a house bill,
        ///             will be generated for you.</summary>
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HouseBill { get; set; }
    
        /// <summary>Control branch.  Can be null.</summary>
        [Newtonsoft.Json.JsonProperty("controlBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ControlBranch { get; set; }
    
        /// <summary> 
        ///             [01] TAE, 
        ///             [02] TOS, 
        ///             [03] TCB, 
        ///             [05] TWC, 
        ///             [21] LIB, 
        ///             [25] PWJ, 
        ///             [27] RAV
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = "[01] TAE";
    
        /// <summary>
        ///             [1] Domestic Air,
        ///             [2] International Air Export,
        ///             [3] International Air Import,
        ///             [4] Ocean Export (FMC),
        ///             [5] Ocean Export (NVOCC),
        ///             [6] Ocean Import (FMC),
        ///             [7] Ocean Import (NVOCC),
        ///             [8] Domestic Truck,
        ///             [19] Domestic Warehouse,
        ///             [20] Ocean Warehouse,
        ///             [21] International Warehouse,
        ///             [22] Intl Customs Brokerage,
        ///             [23] Ocean Customs Brokerage,
        ///             [24] Ocean Import (Unregulated),
        ///             [25] Ocean Export (Unregulated),
        ///             [26] International Truck Import,
        ///             [27] International Truck Export,
        ///             [30] International Truck,
        ///             [31] International Air,
        ///             [32] Ocean Unregulated
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("shipmentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentType { get; set; } = "[8] Domestic Truck";
    
        /// <summary>
        ///         [D] Same Day,
        ///         [N] Over The Counter,
        ///         [A] Overnight AM,
        ///         [P] Overnight PM,
        ///         [R] International Express,
        ///         [T] International Standard,
        ///         [M] International Economy,
        ///         [O] Other,
        ///         [Q] Charter,
        ///         [S] Standard,
        ///         [2] Standard 2 (2-day),
        ///         [3] Economy (3-day),
        ///         [5] Deferred (4-5 day),
        ///         [L] LTL,
        ///         [F] FTL,
        ///         [U] EUV/Hotshot</summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Service { get; set; } = "[3] Economy (3-day)";
    
        /// <summary>Pickup date YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        /// <summary>Origin location. Must be a valid Team Worldwide origin.</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string Origin { get; set; }
    
        /// <summary>Destination location.  Must be a valid Team Worldwide destination</summary>
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string Destination { get; set; }
    
        /// <summary>Acceptable values are IN and CM</summary>
        [Newtonsoft.Json.JsonProperty("linearUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LinearUnits { get; set; } = "IN";
    
        /// <summary>Acceptable values are LB and KG</summary>
        [Newtonsoft.Json.JsonProperty("weightUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeightUnits { get; set; } = "LB";
    
        /// <summary>Is the shipment oversize?</summary>
        [Newtonsoft.Json.JsonProperty("oversize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Oversize { get; set; } = "N";
    
        /// <summary>Description of the goods</summary>
        [Newtonsoft.Json.JsonProperty("goodsDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string GoodsDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    
        /// <summary>Special instructions</summary>
        [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(240)]
        public string SpecialInstructions { get; set; }
    
        /// <summary>Declared value</summary>
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeclaredValue { get; set; }
    
        /// <summary>The shipper of the shipment</summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JsonldShipmentBookingCreate14 Shipper { get; set; } = new JsonldShipmentBookingCreate14();
    
        /// <summary>The consignee of this shipment</summary>
        [Newtonsoft.Json.JsonProperty("consignee", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JsonldShipmentBookingCreate3 Consignee { get; set; } = new JsonldShipmentBookingCreate3();
    
        /// <summary>Billing party of this shipment</summary>
        [Newtonsoft.Json.JsonProperty("billTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldShipmentBookingCreate2 BillTo { get; set; }
    
        /// <summary>Requested pickup</summary>
        [Newtonsoft.Json.JsonProperty("requestedPickup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldShipmentBookingCreate7 RequestedPickup { get; set; }
    
        /// <summary>Request delivery</summary>
        [Newtonsoft.Json.JsonProperty("requestedDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldShipmentBookingCreate6 RequestedDelivery { get; set; }
    
        /// <summary>Shipment goods</summary>
        [Newtonsoft.Json.JsonProperty("shipmentGoods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate11> ShipmentGoods { get; set; }
    
        /// <summary>Shipment goods handling</summary>
        [Newtonsoft.Json.JsonProperty("shipmentGoodsHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate12> ShipmentGoodsHandling { get; set; }
    
        /// <summary>Shipment notes</summary>
        [Newtonsoft.Json.JsonProperty("shipmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate13> ShipmentNotes { get; set; }
    
        /// <summary>Any additional references for this shipment</summary>
        [Newtonsoft.Json.JsonProperty("additionalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate9> AdditionalReferences { get; set; }
    
        /// <summary>Projected Expenses</summary>
        [Newtonsoft.Json.JsonProperty("projectedExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate5> ProjectedExpenses { get; set; }
    
        /// <summary>Projected customer charges</summary>
        [Newtonsoft.Json.JsonProperty("projectedCustomerCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate4> ProjectedCustomerCharges { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentAdditionalReferencesShipmentBookingCreate 
    {
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentAdditionalReferencesShipmentCreate 
    {
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate9 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate8 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [GBL] GBL/CBL#,
        ///         [RF] Reference Number (General),
        ///         [PO] Purchase Order#,
        ///         [IN] Invoice Number,
        ///         [TCN] Transportation Control Number,
        ///         [MF] Manifest Number,
        ///         [CI] Commercial Invoice,
        ///         [PK] Packing List,
        ///         [PN] Part Number ,
        ///         [VIN] Vehicle Identification Number,
        ///         [PRO] Progressive (Pro) Number,
        ///         [CTR] Container Number,
        ///         [SN] Serial Number,
        ///         [SEL] Seal Number,
        ///         [VTL] Vehicle Title Number,
        ///         [VTS] Vehicle Title State,
        ///         [SO] Service Order#,
        ///         [BTH] Booth Number,
        ///         [QTE] Quote Number,
        ///         [JN] Job Number,
        ///         [SHW] Show Name,
        ///         [SHW] Decorator,
        ///         [SHN] Show Number,
        ///         [APT] Appointment Number,
        ///         [DN] Delivery Number,
        ///         [BOL] Bill of Lading,
        ///         [PUP] Pickup Number
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("referenceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReferenceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string Reference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Booking API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentBookingV2ShipmentBookingCreate 
    {
        [Newtonsoft.Json.JsonProperty("bookedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BookedDate { get; set; }
    
        /// <summary>
        ///         [DA] Domestic-Air,
        ///         [IA] International-Air,
        ///         [O] Ocean,
        ///         [T] Domestic/International Truck,
        ///         [TLN] Team Line Haul
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("shippingMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShippingMode { get; set; } = "[T] Domestic/International Truck";
    
        [Newtonsoft.Json.JsonProperty("carrierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CarrierName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string VendorCode { get; set; }
    
        /// <summary>Carrier master bill or booking number</summary>
        [Newtonsoft.Json.JsonProperty("carrierBookingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string CarrierBookingNumber { get; set; }
    
        /// <summary>Secondary carrier master bill or booking number</summary>
        [Newtonsoft.Json.JsonProperty("carrierBookingNumber2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string CarrierBookingNumber2 { get; set; }
    
        /// <summary>
        ///         [S] Standard,
        ///         [X] Express,
        ///         [F] Road Feeder,
        ///         [N] Over the Counter,
        ///         [W] Weekend,
        ///         [T] Truck/Line Haul,
        ///         [E] Economy,
        ///         [H] Hot Shot,
        ///         [K] Full Truck Load,
        ///         [L] Less Than Truck Load,
        ///         [U] Exclusive Use,
        ///         [R] Live Recovery,
        ///         [C] Local
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Service { get; set; } = "[S] Standard";
    
        /// <summary>Ship direct to consignee</summary>
        [Newtonsoft.Json.JsonProperty("directToConsignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DirectToConsignee { get; set; }
    
        /// <summary>Override Pieces/Weight/Volume</summary>
        [Newtonsoft.Json.JsonProperty("overrideMeasures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideMeasures { get; set; }
    
        /// <summary>Total number of pieces</summary>
        [Newtonsoft.Json.JsonProperty("totalPieces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPieces { get; set; }
    
        /// <summary>Total weight of all shipments</summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DepartureDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("departureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DepartureTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ArrivalDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("arrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ArrivalTime { get; set; }
    
        /// <summary>The booking station or airport code.  Generally speaking it will be airport code</summary>
        [Newtonsoft.Json.JsonProperty("bookingStation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string BookingStation { get; set; }
    
        /// <summary>General notes for the booking</summary>
        [Newtonsoft.Json.JsonProperty("generalNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string GeneralNotes { get; set; }
    
        /// <summary>Shipments</summary>
        [Newtonsoft.Json.JsonProperty("shipments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShipmentShipmentBookingCreate> Shipments { get; set; } = new System.Collections.ObjectModel.Collection<ShipmentShipmentBookingCreate>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Booking API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentBookingCreated 
    {
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamBookingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamBookingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isBooked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBooked { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("shipments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentCreated> Shipments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("booked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Booked { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Booking API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld10 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamBookingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamBookingNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isBooked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBooked { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("shipments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Jsonld11> Shipments { get; set; }
    
        [Newtonsoft.Json.JsonProperty("booked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Booked { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Booking API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate10 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("bookedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? BookedDate { get; set; }
    
        /// <summary>
        ///         [DA] Domestic-Air,
        ///         [IA] International-Air,
        ///         [O] Ocean,
        ///         [T] Domestic/International Truck,
        ///         [TLN] Team Line Haul
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("shippingMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShippingMode { get; set; } = "[T] Domestic/International Truck";
    
        [Newtonsoft.Json.JsonProperty("carrierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string CarrierName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("destinationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("vendorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string VendorCode { get; set; }
    
        /// <summary>Carrier master bill or booking number</summary>
        [Newtonsoft.Json.JsonProperty("carrierBookingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string CarrierBookingNumber { get; set; }
    
        /// <summary>Secondary carrier master bill or booking number</summary>
        [Newtonsoft.Json.JsonProperty("carrierBookingNumber2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string CarrierBookingNumber2 { get; set; }
    
        /// <summary>
        ///         [S] Standard,
        ///         [X] Express,
        ///         [F] Road Feeder,
        ///         [N] Over the Counter,
        ///         [W] Weekend,
        ///         [T] Truck/Line Haul,
        ///         [E] Economy,
        ///         [H] Hot Shot,
        ///         [K] Full Truck Load,
        ///         [L] Less Than Truck Load,
        ///         [U] Exclusive Use,
        ///         [R] Live Recovery,
        ///         [C] Local
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Service { get; set; } = "[S] Standard";
    
        /// <summary>Ship direct to consignee</summary>
        [Newtonsoft.Json.JsonProperty("directToConsignee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DirectToConsignee { get; set; }
    
        /// <summary>Override Pieces/Weight/Volume</summary>
        [Newtonsoft.Json.JsonProperty("overrideMeasures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverrideMeasures { get; set; }
    
        /// <summary>Total number of pieces</summary>
        [Newtonsoft.Json.JsonProperty("totalPieces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPieces { get; set; }
    
        /// <summary>Total weight of all shipments</summary>
        [Newtonsoft.Json.JsonProperty("totalWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TotalWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("departureDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DepartureDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("departureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DepartureTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("arrivalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ArrivalDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("arrivalTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ArrivalTime { get; set; }
    
        /// <summary>The booking station or airport code.  Generally speaking it will be airport code</summary>
        [Newtonsoft.Json.JsonProperty("bookingStation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string BookingStation { get; set; }
    
        /// <summary>General notes for the booking</summary>
        [Newtonsoft.Json.JsonProperty("generalNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string GeneralNotes { get; set; }
    
        /// <summary>Shipments</summary>
        [Newtonsoft.Json.JsonProperty("shipments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate8> Shipments { get; set; } = new System.Collections.ObjectModel.Collection<JsonldShipmentBookingCreate8>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentCreated 
    {
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ShipmentKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDateAsReadable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupDateAsReadable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferenceNumbers { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld11 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ShipmentKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDateAsReadable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupDateAsReadable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferenceNumbers { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentGoodsShipmentBookingCreate 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Always)]
        public int Pieces { get; set; } = 1;
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ItemWeight { get; set; }
    
        /// <summary>Need to know if this a dangerous goods shipment</summary>
        [Newtonsoft.Json.JsonProperty("isDangerousGoods", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDangerousGoods { get; set; }
    
        /// <summary>If is dangerous goods, a description is required</summary>
        [Newtonsoft.Json.JsonProperty("dangerousGoodsDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DangerousGoodsDescription { get; set; }
    
        /// <summary>
        ///          [P] Piece,
        ///          [G] Bag,
        ///          [B] Box,
        ///          [K] Case,
        ///          [T] Tube,
        ///          [C] Crate,
        ///          [L] Loose,
        ///          [E] Pallet,
        ///          [S] Skid,
        ///          [U] Tub,
        ///          [D] Drum,
        ///          [N] Container   
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("packageType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PackageType { get; set; }
    
        /// <summary>Container Type</summary>
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string ContainerType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentGoodsShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Always)]
        public int Pieces { get; set; } = 1;
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ItemWeight { get; set; }
    
        /// <summary>Need to know if this a dangerous goods shipment</summary>
        [Newtonsoft.Json.JsonProperty("isDangerousGoods", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDangerousGoods { get; set; }
    
        /// <summary>If is dangerous goods, a description is required</summary>
        [Newtonsoft.Json.JsonProperty("dangerousGoodsDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DangerousGoodsDescription { get; set; }
    
        /// <summary>
        ///          [P] Piece,
        ///          [G] Bag,
        ///          [B] Box,
        ///          [K] Case,
        ///          [T] Tube,
        ///          [C] Crate,
        ///          [L] Loose,
        ///          [E] Pallet,
        ///          [S] Skid,
        ///          [U] Tub,
        ///          [D] Drum,
        ///          [N] Container   
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("packageType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PackageType { get; set; }
    
        /// <summary>Container Type</summary>
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string ContainerType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate11 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Always)]
        public int Pieces { get; set; } = 1;
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ItemWeight { get; set; }
    
        /// <summary>Need to know if this a dangerous goods shipment</summary>
        [Newtonsoft.Json.JsonProperty("isDangerousGoods", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDangerousGoods { get; set; }
    
        /// <summary>If is dangerous goods, a description is required</summary>
        [Newtonsoft.Json.JsonProperty("dangerousGoodsDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DangerousGoodsDescription { get; set; }
    
        /// <summary>
        ///          [P] Piece,
        ///          [G] Bag,
        ///          [B] Box,
        ///          [K] Case,
        ///          [T] Tube,
        ///          [C] Crate,
        ///          [L] Loose,
        ///          [E] Pallet,
        ///          [S] Skid,
        ///          [U] Tub,
        ///          [D] Drum,
        ///          [N] Container   
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("packageType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PackageType { get; set; }
    
        /// <summary>Container Type</summary>
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string ContainerType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate9 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Always)]
        public int Pieces { get; set; } = 1;
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("itemWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ItemWeight { get; set; }
    
        /// <summary>Need to know if this a dangerous goods shipment</summary>
        [Newtonsoft.Json.JsonProperty("isDangerousGoods", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDangerousGoods { get; set; }
    
        /// <summary>If is dangerous goods, a description is required</summary>
        [Newtonsoft.Json.JsonProperty("dangerousGoodsDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DangerousGoodsDescription { get; set; }
    
        /// <summary>
        ///          [P] Piece,
        ///          [G] Bag,
        ///          [B] Box,
        ///          [K] Case,
        ///          [T] Tube,
        ///          [C] Crate,
        ///          [L] Loose,
        ///          [E] Pallet,
        ///          [S] Skid,
        ///          [U] Tub,
        ///          [D] Drum,
        ///          [N] Container   
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("packageType", Required = Newtonsoft.Json.Required.AllowNull)]
        public string PackageType { get; set; }
    
        /// <summary>Container Type</summary>
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string ContainerType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentGoodsHandlingShipmentBookingCreate 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Volume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dimensionalWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DimensionalWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string ContainerType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string ContainerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sealNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SealNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentGoodsHandlingShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Volume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dimensionalWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DimensionalWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string ContainerType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string ContainerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sealNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SealNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate12 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Volume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dimensionalWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DimensionalWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string ContainerType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string ContainerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sealNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SealNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate10 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pieces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pieces { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Height { get; set; }
    
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Width { get; set; }
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Length { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Volume { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dimensionalWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DimensionalWeight { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string ContainerType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("containerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string ContainerNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sealNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string SealNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Note API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentNoteResource 
    {
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        /// <summary>
        ///         [CA] Carrier,
        ///         [DL] Delivery,
        ///         [DP] Denied Party,
        ///         [DO] Document,
        ///         [GN] General,
        ///         [HB] HouseBill,
        ///         [IN] Invoice,
        ///         [PM] Permissions,
        ///         [PU] Pickup,
        ///         [PR] Procurement,
        ///         [PC] Procurement Costs,
        ///         [RC] Recap,
        ///         [RT] Routing,
        ///         [SH] Shipment,
        ///         [ST] Status,
        ///         [TK] Tracking,
        ///         [WT] WorldTrak
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("noteType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NoteType { get; set; } = "[GN] General";
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3000)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Note API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentNoteResourceShipmentBookingCreate 
    {
        /// <summary>
        ///         [CA] Carrier,
        ///         [DL] Delivery,
        ///         [DP] Denied Party,
        ///         [DO] Document,
        ///         [GN] General,
        ///         [HB] HouseBill,
        ///         [IN] Invoice,
        ///         [PM] Permissions,
        ///         [PU] Pickup,
        ///         [PR] Procurement,
        ///         [PC] Procurement Costs,
        ///         [RC] Recap,
        ///         [RT] Routing,
        ///         [SH] Shipment,
        ///         [ST] Status,
        ///         [TK] Tracking,
        ///         [WT] WorldTrak
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("noteType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NoteType { get; set; } = "[GN] General";
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3000)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Note API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentNoteResourceShipmentCreate 
    {
        /// <summary>
        ///         [CA] Carrier,
        ///         [DL] Delivery,
        ///         [DP] Denied Party,
        ///         [DO] Document,
        ///         [GN] General,
        ///         [HB] HouseBill,
        ///         [IN] Invoice,
        ///         [PM] Permissions,
        ///         [PU] Pickup,
        ///         [PR] Procurement,
        ///         [PC] Procurement Costs,
        ///         [RC] Recap,
        ///         [RT] Routing,
        ///         [SH] Shipment,
        ///         [ST] Status,
        ///         [TK] Tracking,
        ///         [WT] WorldTrak
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("noteType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NoteType { get; set; } = "[GN] General";
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3000)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Note API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate11 
    {
        /// <summary>
        ///         [CA] Carrier,
        ///         [DL] Delivery,
        ///         [DP] Denied Party,
        ///         [DO] Document,
        ///         [GN] General,
        ///         [HB] HouseBill,
        ///         [IN] Invoice,
        ///         [PM] Permissions,
        ///         [PU] Pickup,
        ///         [PR] Procurement,
        ///         [PC] Procurement Costs,
        ///         [RC] Recap,
        ///         [RT] Routing,
        ///         [SH] Shipment,
        ///         [ST] Status,
        ///         [TK] Tracking,
        ///         [WT] WorldTrak
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("noteType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NoteType { get; set; } = "[GN] General";
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3000)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Note API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld12 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        /// <summary>
        ///         [CA] Carrier,
        ///         [DL] Delivery,
        ///         [DP] Denied Party,
        ///         [DO] Document,
        ///         [GN] General,
        ///         [HB] HouseBill,
        ///         [IN] Invoice,
        ///         [PM] Permissions,
        ///         [PU] Pickup,
        ///         [PR] Procurement,
        ///         [PC] Procurement Costs,
        ///         [RC] Recap,
        ///         [RT] Routing,
        ///         [SH] Shipment,
        ///         [ST] Status,
        ///         [TK] Tracking,
        ///         [WT] WorldTrak
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("noteType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NoteType { get; set; } = "[GN] General";
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3000)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Note API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate13 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [CA] Carrier,
        ///         [DL] Delivery,
        ///         [DP] Denied Party,
        ///         [DO] Document,
        ///         [GN] General,
        ///         [HB] HouseBill,
        ///         [IN] Invoice,
        ///         [PM] Permissions,
        ///         [PU] Pickup,
        ///         [PR] Procurement,
        ///         [PC] Procurement Costs,
        ///         [RC] Recap,
        ///         [RT] Routing,
        ///         [SH] Shipment,
        ///         [ST] Status,
        ///         [TK] Tracking,
        ///         [WT] WorldTrak
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("noteType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NoteType { get; set; } = "[GN] General";
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3000)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Note API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate12 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [CA] Carrier,
        ///         [DL] Delivery,
        ///         [DP] Denied Party,
        ///         [DO] Document,
        ///         [GN] General,
        ///         [HB] HouseBill,
        ///         [IN] Invoice,
        ///         [PM] Permissions,
        ///         [PU] Pickup,
        ///         [PR] Procurement,
        ///         [PC] Procurement Costs,
        ///         [RC] Recap,
        ///         [RT] Routing,
        ///         [SH] Shipment,
        ///         [ST] Status,
        ///         [TK] Tracking,
        ///         [WT] WorldTrak
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("noteType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NoteType { get; set; } = "[GN] General";
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3000)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment Note API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate13 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>
        ///         [CA] Carrier,
        ///         [DL] Delivery,
        ///         [DP] Denied Party,
        ///         [DO] Document,
        ///         [GN] General,
        ///         [HB] HouseBill,
        ///         [IN] Invoice,
        ///         [PM] Permissions,
        ///         [PU] Pickup,
        ///         [PR] Procurement,
        ///         [PC] Procurement Costs,
        ///         [RC] Recap,
        ///         [RT] Routing,
        ///         [SH] Shipment,
        ///         [ST] Status,
        ///         [TK] Tracking,
        ///         [WT] WorldTrak
        ///     </summary>
        [Newtonsoft.Json.JsonProperty("noteType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NoteType { get; set; } = "[GN] General";
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3000)]
        public string Text { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentShipmentCreate 
    {
        /// <summary>Set true if this is a live shipment</summary>
        [Newtonsoft.Json.JsonProperty("isTestShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsTestShipment { get; set; }
    
        /// <summary>If your account is enabled to pre-reserve the house bill, 
        ///             you must reserve a house bill from the /api/teamww/get-house-bill endpoint.  Leave this property blank and a house bill,
        ///             will be generated for you.</summary>
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HouseBill { get; set; }
    
        /// <summary>Control branch.  Can be null.</summary>
        [Newtonsoft.Json.JsonProperty("controlBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ControlBranch { get; set; }
    
        /// <summary> 
        ///             [01] TAE, 
        ///             [02] TOS, 
        ///             [03] TCB, 
        ///             [05] TWC, 
        ///             [21] LIB, 
        ///             [25] PWJ, 
        ///             [27] RAV
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = "[01] TAE";
    
        /// <summary>
        ///             [1] Domestic Air,
        ///             [2] International Air Export,
        ///             [3] International Air Import,
        ///             [4] Ocean Export (FMC),
        ///             [5] Ocean Export (NVOCC),
        ///             [6] Ocean Import (FMC),
        ///             [7] Ocean Import (NVOCC),
        ///             [8] Domestic Truck,
        ///             [19] Domestic Warehouse,
        ///             [20] Ocean Warehouse,
        ///             [21] International Warehouse,
        ///             [22] Intl Customs Brokerage,
        ///             [23] Ocean Customs Brokerage,
        ///             [24] Ocean Import (Unregulated),
        ///             [25] Ocean Export (Unregulated),
        ///             [26] International Truck Import,
        ///             [27] International Truck Export,
        ///             [30] International Truck,
        ///             [31] International Air,
        ///             [32] Ocean Unregulated
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("shipmentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentType { get; set; } = "[8] Domestic Truck";
    
        /// <summary>
        ///         [D] Same Day,
        ///         [N] Over The Counter,
        ///         [A] Overnight AM,
        ///         [P] Overnight PM,
        ///         [R] International Express,
        ///         [T] International Standard,
        ///         [M] International Economy,
        ///         [O] Other,
        ///         [Q] Charter,
        ///         [S] Standard,
        ///         [2] Standard 2 (2-day),
        ///         [3] Economy (3-day),
        ///         [5] Deferred (4-5 day),
        ///         [L] LTL,
        ///         [F] FTL,
        ///         [U] EUV/Hotshot</summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Service { get; set; } = "[3] Economy (3-day)";
    
        /// <summary>Pickup date YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        /// <summary>Origin location. Must be a valid Team Worldwide origin.</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string Origin { get; set; }
    
        /// <summary>Destination location.  Must be a valid Team Worldwide destination</summary>
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string Destination { get; set; }
    
        /// <summary>Acceptable values are IN and CM</summary>
        [Newtonsoft.Json.JsonProperty("linearUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LinearUnits { get; set; } = "IN";
    
        /// <summary>Acceptable values are LB and KG</summary>
        [Newtonsoft.Json.JsonProperty("weightUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeightUnits { get; set; } = "LB";
    
        /// <summary>Is the shipment oversize?</summary>
        [Newtonsoft.Json.JsonProperty("oversize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Oversize { get; set; } = "N";
    
        /// <summary>Description of the goods</summary>
        [Newtonsoft.Json.JsonProperty("goodsDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string GoodsDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    
        /// <summary>Special instructions</summary>
        [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(240)]
        public string SpecialInstructions { get; set; }
    
        /// <summary>Declared value</summary>
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeclaredValue { get; set; }
    
        /// <summary>The shipper of the shipment</summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipperShipmentCreate Shipper { get; set; } = new ShipperShipmentCreate();
    
        /// <summary>The consignee of this shipment</summary>
        [Newtonsoft.Json.JsonProperty("consignee", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ConsigneeShipmentCreate Consignee { get; set; } = new ConsigneeShipmentCreate();
    
        /// <summary>Billing party of this shipment</summary>
        [Newtonsoft.Json.JsonProperty("billTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillToShipmentCreate BillTo { get; set; }
    
        /// <summary>Requested pickup</summary>
        [Newtonsoft.Json.JsonProperty("requestedPickup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedPickupShipmentCreate RequestedPickup { get; set; }
    
        /// <summary>Request delivery</summary>
        [Newtonsoft.Json.JsonProperty("requestedDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestedDeliveryShipmentCreate RequestedDelivery { get; set; }
    
        /// <summary>Shipment goods</summary>
        [Newtonsoft.Json.JsonProperty("shipmentGoods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentGoodsShipmentCreate> ShipmentGoods { get; set; }
    
        /// <summary>Shipment goods handling</summary>
        [Newtonsoft.Json.JsonProperty("shipmentGoodsHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentGoodsHandlingShipmentCreate> ShipmentGoodsHandling { get; set; }
    
        /// <summary>Shipment notes</summary>
        [Newtonsoft.Json.JsonProperty("shipmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentNoteResourceShipmentCreate> ShipmentNotes { get; set; }
    
        /// <summary>Any additional references for this shipment</summary>
        [Newtonsoft.Json.JsonProperty("additionalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ShipmentAdditionalReferencesShipmentCreate> AdditionalReferences { get; set; }
    
        /// <summary>Projected Expenses</summary>
        [Newtonsoft.Json.JsonProperty("projectedExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectedExpenseShipmentCreate> ProjectedExpenses { get; set; }
    
        /// <summary>Projected customer charges</summary>
        [Newtonsoft.Json.JsonProperty("projectedCustomerCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectedCustomerChargeShipmentCreate> ProjectedCustomerCharges { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate14 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Set true if this is a live shipment</summary>
        [Newtonsoft.Json.JsonProperty("isTestShipment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsTestShipment { get; set; }
    
        /// <summary>If your account is enabled to pre-reserve the house bill, 
        ///             you must reserve a house bill from the /api/teamww/get-house-bill endpoint.  Leave this property blank and a house bill,
        ///             will be generated for you.</summary>
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string HouseBill { get; set; }
    
        /// <summary>Control branch.  Can be null.</summary>
        [Newtonsoft.Json.JsonProperty("controlBranch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ControlBranch { get; set; }
    
        /// <summary> 
        ///             [01] TAE, 
        ///             [02] TOS, 
        ///             [03] TCB, 
        ///             [05] TWC, 
        ///             [21] LIB, 
        ///             [25] PWJ, 
        ///             [27] RAV
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = "[01] TAE";
    
        /// <summary>
        ///             [1] Domestic Air,
        ///             [2] International Air Export,
        ///             [3] International Air Import,
        ///             [4] Ocean Export (FMC),
        ///             [5] Ocean Export (NVOCC),
        ///             [6] Ocean Import (FMC),
        ///             [7] Ocean Import (NVOCC),
        ///             [8] Domestic Truck,
        ///             [19] Domestic Warehouse,
        ///             [20] Ocean Warehouse,
        ///             [21] International Warehouse,
        ///             [22] Intl Customs Brokerage,
        ///             [23] Ocean Customs Brokerage,
        ///             [24] Ocean Import (Unregulated),
        ///             [25] Ocean Export (Unregulated),
        ///             [26] International Truck Import,
        ///             [27] International Truck Export,
        ///             [30] International Truck,
        ///             [31] International Air,
        ///             [32] Ocean Unregulated
        ///         </summary>
        [Newtonsoft.Json.JsonProperty("shipmentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipmentType { get; set; } = "[8] Domestic Truck";
    
        /// <summary>
        ///         [D] Same Day,
        ///         [N] Over The Counter,
        ///         [A] Overnight AM,
        ///         [P] Overnight PM,
        ///         [R] International Express,
        ///         [T] International Standard,
        ///         [M] International Economy,
        ///         [O] Other,
        ///         [Q] Charter,
        ///         [S] Standard,
        ///         [2] Standard 2 (2-day),
        ///         [3] Economy (3-day),
        ///         [5] Deferred (4-5 day),
        ///         [L] LTL,
        ///         [F] FTL,
        ///         [U] EUV/Hotshot</summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Service { get; set; } = "[3] Economy (3-day)";
    
        /// <summary>Pickup date YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        /// <summary>Origin location. Must be a valid Team Worldwide origin.</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string Origin { get; set; }
    
        /// <summary>Destination location.  Must be a valid Team Worldwide destination</summary>
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string Destination { get; set; }
    
        /// <summary>Acceptable values are IN and CM</summary>
        [Newtonsoft.Json.JsonProperty("linearUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LinearUnits { get; set; } = "IN";
    
        /// <summary>Acceptable values are LB and KG</summary>
        [Newtonsoft.Json.JsonProperty("weightUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeightUnits { get; set; } = "LB";
    
        /// <summary>Is the shipment oversize?</summary>
        [Newtonsoft.Json.JsonProperty("oversize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Oversize { get; set; } = "N";
    
        /// <summary>Description of the goods</summary>
        [Newtonsoft.Json.JsonProperty("goodsDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string GoodsDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Weight { get; set; }
    
        /// <summary>Special instructions</summary>
        [Newtonsoft.Json.JsonProperty("specialInstructions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(240)]
        public string SpecialInstructions { get; set; }
    
        /// <summary>Declared value</summary>
        [Newtonsoft.Json.JsonProperty("declaredValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? DeclaredValue { get; set; }
    
        /// <summary>The shipper of the shipment</summary>
        [Newtonsoft.Json.JsonProperty("shipper", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JsonldShipmentCreate15 Shipper { get; set; } = new JsonldShipmentCreate15();
    
        /// <summary>The consignee of this shipment</summary>
        [Newtonsoft.Json.JsonProperty("consignee", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JsonldShipmentCreate3 Consignee { get; set; } = new JsonldShipmentCreate3();
    
        /// <summary>Billing party of this shipment</summary>
        [Newtonsoft.Json.JsonProperty("billTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldShipmentCreate2 BillTo { get; set; }
    
        /// <summary>Requested pickup</summary>
        [Newtonsoft.Json.JsonProperty("requestedPickup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldShipmentCreate7 RequestedPickup { get; set; }
    
        /// <summary>Request delivery</summary>
        [Newtonsoft.Json.JsonProperty("requestedDelivery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonldShipmentCreate6 RequestedDelivery { get; set; }
    
        /// <summary>Shipment goods</summary>
        [Newtonsoft.Json.JsonProperty("shipmentGoods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentCreate9> ShipmentGoods { get; set; }
    
        /// <summary>Shipment goods handling</summary>
        [Newtonsoft.Json.JsonProperty("shipmentGoodsHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentCreate10> ShipmentGoodsHandling { get; set; }
    
        /// <summary>Shipment notes</summary>
        [Newtonsoft.Json.JsonProperty("shipmentNotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentCreate12> ShipmentNotes { get; set; }
    
        /// <summary>Any additional references for this shipment</summary>
        [Newtonsoft.Json.JsonProperty("additionalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentCreate8> AdditionalReferences { get; set; }
    
        /// <summary>Projected Expenses</summary>
        [Newtonsoft.Json.JsonProperty("projectedExpenses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentCreate5> ProjectedExpenses { get; set; }
    
        /// <summary>Projected customer charges</summary>
        [Newtonsoft.Json.JsonProperty("projectedCustomerCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentCreate4> ProjectedCustomerCharges { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipmentCreated2 
    {
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ShipmentKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDateAsReadable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupDateAsReadable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferenceNumbers { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Jsonld13 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("shipmentKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ShipmentKey { get; set; }
    
        [Newtonsoft.Json.JsonProperty("houseBill", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HouseBill { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDateAsReadable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupDateAsReadable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pickupDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PickupDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReferenceNumbers { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipperShipmentBookingCreate 
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalReferenceShipmentBookingCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShipperShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalReferenceShipmentCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read25 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentBookingCreate14 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentBookingCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldShipmentCreate15 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JsonldShipmentCreate> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read26 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Address3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}\d{3}\d{4})$")]
        public string ContactPhone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_read2> AdditionalReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TeamBookConsigneeTeamBookShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>2 character state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = "US";
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string ContactPhone { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldTeamBookShipmentCreate6 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>2 character state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = "US";
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string ContactPhone { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TeamBookShipperTeamBookShipmentCreate 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>2 character state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = "US";
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string ContactPhone { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JsonldTeamBookShipmentCreate7 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("referenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenceNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>2 character state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string State { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{5}(?:[-\s]\d{4})?)$")]
        public string ZipCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = "US";
    
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string Phone { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string Fax { get; set; }
    
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contactPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(\d{3}-\d{3}-\d{4})$")]
        public string ContactPhone { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateTeamBookingUpdateTeamBooking 
    {
        /// <summary>Carrier booking number</summary>
        [Newtonsoft.Json.JsonProperty("carrierBookingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string CarrierBookingNumber { get; set; }
    
        /// <summary>Secondary carrier booking number</summary>
        [Newtonsoft.Json.JsonProperty("carrierBookingNumber2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(25)]
        public string CarrierBookingNumber2 { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read27 
    {
        /// <summary>Team Booking number</summary>
        [Newtonsoft.Json.JsonProperty("teamBookingNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string TeamBookingNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipment API Resource</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_read28 
    {
        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Context { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Team Booking number</summary>
        [Newtonsoft.Json.JsonProperty("teamBookingNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string TeamBookingNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Credentials 
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }
    
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UnitOfMeasure
    {
        [System.Runtime.Serialization.EnumMember(Value = @"US")]
        US = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"METRIC")]
        METRIC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIXED")]
        MIXED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Equipment
    {
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Van")]
        Van = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Flatbed")]
        Flatbed = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("hydra:member", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Get_read8> Hydra_member { get; set; } = new System.Collections.ObjectModel.Collection<Get_read8>();
    
        [Newtonsoft.Json.JsonProperty("hydra:totalItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Hydra_totalItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_view Hydra_view { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:search", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_search Hydra_search { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response2 
    {
        [Newtonsoft.Json.JsonProperty("hydra:member", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Get_read14> Hydra_member { get; set; } = new System.Collections.ObjectModel.Collection<Get_read14>();
    
        [Newtonsoft.Json.JsonProperty("hydra:totalItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Hydra_totalItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_view2 Hydra_view { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:search", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_search2 Hydra_search { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response3 
    {
        [Newtonsoft.Json.JsonProperty("hydra:member", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Read_read2> Hydra_member { get; set; } = new System.Collections.ObjectModel.Collection<Read_read2>();
    
        [Newtonsoft.Json.JsonProperty("hydra:totalItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Hydra_totalItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_view3 Hydra_view { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:search", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_search3 Hydra_search { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response4 
    {
        [Newtonsoft.Json.JsonProperty("hydra:member", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Get_read16> Hydra_member { get; set; } = new System.Collections.ObjectModel.Collection<Get_read16>();
    
        [Newtonsoft.Json.JsonProperty("hydra:totalItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Hydra_totalItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_view4 Hydra_view { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:search", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_search4 Hydra_search { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response5 
    {
        [Newtonsoft.Json.JsonProperty("hydra:member", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Get_read10> Hydra_member { get; set; } = new System.Collections.ObjectModel.Collection<Get_read10>();
    
        [Newtonsoft.Json.JsonProperty("hydra:totalItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Hydra_totalItems { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_view5 Hydra_view { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:search", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hydra_search5 Hydra_search { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_view 
    {
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:first", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_first { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:last", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_last { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:previous", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_previous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_next { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_search 
    {
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:template", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:variableRepresentation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_variableRepresentation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Hydra_mapping> Hydra_mapping { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_view2 
    {
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:first", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_first { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:last", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_last { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:previous", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_previous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_next { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_search2 
    {
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:template", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:variableRepresentation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_variableRepresentation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Hydra_mapping> Hydra_mapping { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_view3 
    {
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:first", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_first { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:last", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_last { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:previous", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_previous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_next { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_search3 
    {
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:template", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:variableRepresentation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_variableRepresentation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Hydra_mapping> Hydra_mapping { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_view4 
    {
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:first", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_first { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:last", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_last { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:previous", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_previous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_next { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_search4 
    {
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:template", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:variableRepresentation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_variableRepresentation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Hydra_mapping> Hydra_mapping { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_view5 
    {
        [Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:first", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_first { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:last", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_last { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:previous", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_previous { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_next { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_search5 
    {
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:template", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_template { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:variableRepresentation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hydra_variableRepresentation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("hydra:mapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Hydra_mapping> Hydra_mapping { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hydra_mapping 
    {
        [Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("variable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Variable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }
    
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Required { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108